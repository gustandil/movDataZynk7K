// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module path_thr_axis_path_thr_axis_Pipeline_VITIS_LOOP_31_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        addr_load,
        strm_in_TDATA,
        strm_in_TVALID,
        strm_in_TREADY,
        strm_in_TKEEP,
        strm_in_TSTRB,
        strm_in_TUSER,
        strm_in_TLAST,
        strm_in_TID,
        strm_in_TDEST,
        strm_out_TDATA,
        strm_out_TVALID,
        strm_out_TREADY,
        strm_out_TKEEP,
        strm_out_TSTRB,
        strm_out_TUSER,
        strm_out_TLAST,
        strm_out_TID,
        strm_out_TDEST,
        statistics,
        statistics_ap_vld,
        addr_flag_0_out,
        addr_flag_0_out_ap_vld,
        addr_loc_0_out,
        addr_loc_0_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] addr_load;
input  [63:0] strm_in_TDATA;
input   strm_in_TVALID;
output   strm_in_TREADY;
input  [7:0] strm_in_TKEEP;
input  [7:0] strm_in_TSTRB;
input  [0:0] strm_in_TUSER;
input  [0:0] strm_in_TLAST;
input  [0:0] strm_in_TID;
input  [0:0] strm_in_TDEST;
output  [31:0] strm_out_TDATA;
output   strm_out_TVALID;
input   strm_out_TREADY;
output  [3:0] strm_out_TKEEP;
output  [3:0] strm_out_TSTRB;
output  [0:0] strm_out_TUSER;
output  [0:0] strm_out_TLAST;
output  [0:0] strm_out_TID;
output  [0:0] strm_out_TDEST;
output  [31:0] statistics;
output   statistics_ap_vld;
output  [0:0] addr_flag_0_out;
output   addr_flag_0_out_ap_vld;
output  [31:0] addr_loc_0_out;
output   addr_loc_0_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_TREADY;
reg strm_out_TVALID;
reg statistics_ap_vld;
reg addr_flag_0_out_ap_vld;
reg addr_loc_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_nbreadreq_fu_104_p9;
reg    strm_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_reg_275;
reg   [0:0] addr_flag_0_reg_192;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] input_data_user_reg_279;
reg   [0:0] input_data_last_reg_284;
wire   [31:0] data_wr_fu_242_p2;
reg   [31:0] data_wr_reg_289;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] addr_loc_0_fu_94;
wire   [31:0] select_ln51_fu_254_p3;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
wire   [31:0] trunc_ln43_fu_238_p1;
wire   [31:0] tmp_s_fu_228_p4;
wire   [31:0] add_ln51_fu_248_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_275 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_flag_0_reg_192 <= 1'd1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        addr_flag_0_reg_192 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        addr_loc_0_fu_94 <= addr_load;
    end else if (((tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_loc_0_fu_94 <= select_ln51_fu_254_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_wr_reg_289 <= data_wr_fu_242_p2;
        input_data_last_reg_284 <= strm_in_TLAST;
        input_data_user_reg_279 <= strm_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_275 <= tmp_nbreadreq_fu_104_p9;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        addr_flag_0_out_ap_vld = 1'b1;
    end else begin
        addr_flag_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        addr_loc_0_out_ap_vld = 1'b1;
    end else begin
        addr_loc_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((tmp_nbreadreq_fu_104_p9 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        statistics_ap_vld = 1'b1;
    end else begin
        statistics_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TDATA_blk_n = strm_in_TVALID;
    end else begin
        strm_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TREADY = 1'b1;
    end else begin
        strm_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_275 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_TDATA_blk_n = strm_out_TREADY;
    end else begin
        strm_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_275 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_TVALID = 1'b1;
    end else begin
        strm_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_nbreadreq_fu_104_p9 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_nbreadreq_fu_104_p9 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_fu_248_p2 = (addr_loc_0_fu_94 + 32'd1);

assign addr_flag_0_out = addr_flag_0_reg_192;

assign addr_loc_0_out = addr_loc_0_fu_94;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_reg_275 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (strm_out_TREADY == 1'b0)) | ((tmp_nbreadreq_fu_104_p9 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (strm_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((tmp_reg_275 == 1'd1) & (strm_out_TREADY == 1'b0)))) | ((tmp_nbreadreq_fu_104_p9 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (strm_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((tmp_reg_275 == 1'd1) & (strm_out_TREADY == 1'b0)))) | ((tmp_nbreadreq_fu_104_p9 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (strm_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((tmp_nbreadreq_fu_104_p9 == 1'd1) & (strm_in_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_reg_275 == 1'd1) & (strm_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_reg_275 == 1'd1) & (strm_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_wr_fu_242_p2 = (trunc_ln43_fu_238_p1 + tmp_s_fu_228_p4);

assign select_ln51_fu_254_p3 = ((strm_in_TUSER[0:0] == 1'b1) ? 32'd1 : add_ln51_fu_248_p2);

assign statistics = ((strm_in_TUSER[0:0] == 1'b1) ? 32'd1 : add_ln51_fu_248_p2);

assign strm_out_TDATA = data_wr_reg_289;

assign strm_out_TDEST = 1'd0;

assign strm_out_TID = 1'd0;

assign strm_out_TKEEP = 4'd15;

assign strm_out_TLAST = input_data_last_reg_284;

assign strm_out_TSTRB = 4'd0;

assign strm_out_TUSER = input_data_user_reg_279;

assign tmp_nbreadreq_fu_104_p9 = strm_in_TVALID;

assign tmp_s_fu_228_p4 = {{strm_in_TDATA[63:32]}};

assign trunc_ln43_fu_238_p1 = strm_in_TDATA[31:0];

endmodule //path_thr_axis_path_thr_axis_Pipeline_VITIS_LOOP_31_1
