#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_memWR_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_memWR_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_memWR_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_memWR_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_memWR_AWLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_memWR_AWSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_memWR_AWBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_memWR_AWLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_memWR_AWCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_memWR_AWPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_memWR_AWQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_memWR_AWREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_memWR_AWUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_memWR_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_memWR_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_memWR_WDATA", 32, hls_out, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_memWR_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_memWR_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_memWR_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_memWR_WUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_memWR_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_memWR_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_memWR_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_memWR_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_memWR_ARLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_memWR_ARSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_memWR_ARBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_memWR_ARLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_memWR_ARCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_memWR_ARPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_memWR_ARQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_memWR_ARREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_memWR_ARUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_memWR_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_memWR_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_memWR_RDATA", 32, hls_in, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_memWR_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_memWR_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_memWR_RUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_memWR_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_memWR_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_memWR_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_memWR_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_memWR_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_memWR_BUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("strm_in_TDATA", 64, hls_in, 1, "axis", "in_data", 1),
	Port_Property("strm_in_TVALID", 1, hls_in, 7, "axis", "in_vld", 1),
	Port_Property("strm_in_TREADY", 1, hls_out, 7, "axis", "in_acc", 1),
	Port_Property("strm_in_TKEEP", 8, hls_in, 2, "axis", "in_data", 1),
	Port_Property("strm_in_TSTRB", 8, hls_in, 3, "axis", "in_data", 1),
	Port_Property("strm_in_TUSER", 1, hls_in, 4, "axis", "in_data", 1),
	Port_Property("strm_in_TLAST", 1, hls_in, 5, "axis", "in_data", 1),
	Port_Property("strm_in_TID", 1, hls_in, 6, "axis", "in_data", 1),
	Port_Property("strm_in_TDEST", 1, hls_in, 7, "axis", "in_data", 1),
	Port_Property("s_axi_Axi_lite_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_AWADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_ARADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_Axi_lite_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "cpyData_copro";
