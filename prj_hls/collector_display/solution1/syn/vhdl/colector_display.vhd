-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity colector_display is
generic (
    C_S_AXI_AXI_LITE_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXI_LITE_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    strm_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    strm_in_TVALID : IN STD_LOGIC;
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    received : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_Axi_lite_AWVALID : IN STD_LOGIC;
    s_axi_Axi_lite_AWREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_ADDR_WIDTH-1 downto 0);
    s_axi_Axi_lite_WVALID : IN STD_LOGIC;
    s_axi_Axi_lite_WREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH-1 downto 0);
    s_axi_Axi_lite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH/8-1 downto 0);
    s_axi_Axi_lite_ARVALID : IN STD_LOGIC;
    s_axi_Axi_lite_ARREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_ADDR_WIDTH-1 downto 0);
    s_axi_Axi_lite_RVALID : OUT STD_LOGIC;
    s_axi_Axi_lite_RREADY : IN STD_LOGIC;
    s_axi_Axi_lite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH-1 downto 0);
    s_axi_Axi_lite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Axi_lite_BVALID : OUT STD_LOGIC;
    s_axi_Axi_lite_BREADY : IN STD_LOGIC;
    s_axi_Axi_lite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of colector_display is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "colector_display_colector_display,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.072000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=496,HLS_SYN_LUT=782,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal total_size : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_total_ap_vld : STD_LOGIC;
    signal processed_elem_ap_vld : STD_LOGIC;
    signal received_img_ap_vld : STD_LOGIC;
    signal numWrites : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accum : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal rows_counter : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal columns_counter : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal image_ok : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal image_wr : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_nbreadreq_fu_112_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln72_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_data_user_fu_253_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_user_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_last_fu_257_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_last_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln70_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_storemerge_phi_fu_187_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln65_fu_274_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_184 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_storemerge3_phi_fu_197_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge3_reg_194 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_phi_ln72_phi_fu_209_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln72_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_accum_loc_0_phi_fu_220_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter0_accum_loc_0_reg_217 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln76_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln75_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge1_phi_fu_240_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge1_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_s_fu_300_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln70_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_fu_310_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln70_1_fu_318_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln70_1_fu_322_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln70_2_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal strm_in_TVALID_int_regslice : STD_LOGIC;
    signal strm_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_strm_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_strm_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_user_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_id_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_condition_128 : BOOLEAN;
    signal ap_condition_360 : BOOLEAN;
    signal ap_condition_363 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component colector_display_Axi_lite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        total_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        accum_total : IN STD_LOGIC_VECTOR (63 downto 0);
        accum_total_ap_vld : IN STD_LOGIC;
        processed_elem : IN STD_LOGIC_VECTOR (31 downto 0);
        processed_elem_ap_vld : IN STD_LOGIC;
        received_img : IN STD_LOGIC_VECTOR (31 downto 0);
        received_img_ap_vld : IN STD_LOGIC );
    end component;


    component colector_display_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    Axi_lite_s_axi_U : component colector_display_Axi_lite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_LITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_LITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Axi_lite_AWVALID,
        AWREADY => s_axi_Axi_lite_AWREADY,
        AWADDR => s_axi_Axi_lite_AWADDR,
        WVALID => s_axi_Axi_lite_WVALID,
        WREADY => s_axi_Axi_lite_WREADY,
        WDATA => s_axi_Axi_lite_WDATA,
        WSTRB => s_axi_Axi_lite_WSTRB,
        ARVALID => s_axi_Axi_lite_ARVALID,
        ARREADY => s_axi_Axi_lite_ARREADY,
        ARADDR => s_axi_Axi_lite_ARADDR,
        RVALID => s_axi_Axi_lite_RVALID,
        RREADY => s_axi_Axi_lite_RREADY,
        RDATA => s_axi_Axi_lite_RDATA,
        RRESP => s_axi_Axi_lite_RRESP,
        BVALID => s_axi_Axi_lite_BVALID,
        BREADY => s_axi_Axi_lite_BREADY,
        BRESP => s_axi_Axi_lite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        total_size => total_size,
        accum_total => add_ln70_reg_418,
        accum_total_ap_vld => accum_total_ap_vld,
        processed_elem => phi_ln72_reg_205,
        processed_elem_ap_vld => processed_elem_ap_vld,
        received_img => ap_phi_mux_image_ok_loc_0_phi_fu_230_p4,
        received_img_ap_vld => received_img_ap_vld);

    regslice_both_strm_in_V_data_V_U : component colector_display_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TDATA,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_data_V_U_ack_in,
        data_out => strm_in_TDATA_int_regslice,
        vld_out => strm_in_TVALID_int_regslice,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_data_V_U_apdone_blk);

    regslice_both_strm_in_V_keep_V_U : component colector_display_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TKEEP,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_keep_V_U_ack_in,
        data_out => strm_in_TKEEP_int_regslice,
        vld_out => regslice_both_strm_in_V_keep_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_keep_V_U_apdone_blk);

    regslice_both_strm_in_V_strb_V_U : component colector_display_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TSTRB,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_strb_V_U_ack_in,
        data_out => strm_in_TSTRB_int_regslice,
        vld_out => regslice_both_strm_in_V_strb_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_strb_V_U_apdone_blk);

    regslice_both_strm_in_V_user_V_U : component colector_display_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TUSER,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_user_V_U_ack_in,
        data_out => strm_in_TUSER_int_regslice,
        vld_out => regslice_both_strm_in_V_user_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_user_V_U_apdone_blk);

    regslice_both_strm_in_V_last_V_U : component colector_display_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TLAST,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_last_V_U_ack_in,
        data_out => strm_in_TLAST_int_regslice,
        vld_out => regslice_both_strm_in_V_last_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_last_V_U_apdone_blk);

    regslice_both_strm_in_V_id_V_U : component colector_display_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TID,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_id_V_U_ack_in,
        data_out => strm_in_TID_int_regslice,
        vld_out => regslice_both_strm_in_V_id_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_id_V_U_apdone_blk);

    regslice_both_strm_in_V_dest_V_U : component colector_display_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TDEST,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_dest_V_U_ack_in,
        data_out => strm_in_TDEST_int_regslice,
        vld_out => regslice_both_strm_in_V_dest_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    phi_ln72_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_128)) then
                if (((input_data_user_fu_253_p1 = ap_const_lv1_1) and (tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1))) then 
                    phi_ln72_reg_205 <= ap_const_lv32_1;
                elsif (((input_data_user_fu_253_p1 = ap_const_lv1_0) and (tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1))) then 
                    phi_ln72_reg_205 <= phitmp_fu_281_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    phi_ln72_reg_205 <= ap_phi_reg_pp0_iter0_phi_ln72_reg_205;
                end if;
            end if; 
        end if;
    end process;

    rows_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_363)) then 
                    rows_counter <= ap_const_lv10_0;
                elsif ((ap_const_boolean_1 = ap_condition_360)) then 
                    rows_counter <= add_ln61_fu_354_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                accum <= add_ln70_fu_332_p2;
                columns_counter <= ap_phi_mux_storemerge3_phi_fu_197_p4;
                numWrites <= ap_phi_mux_phi_ln72_phi_fu_209_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln70_reg_418 <= add_ln70_fu_332_p2;
                input_data_last_reg_414 <= strm_in_TLAST_int_regslice;
                input_data_user_reg_410 <= strm_in_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln75_fu_366_p2 = ap_const_lv1_1))) then
                image_ok <= add_ln76_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln75_fu_366_p2 = ap_const_lv1_0))) then
                image_wr <= add_ln78_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_406 <= tmp_nbreadreq_fu_112_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    accum_total_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_406, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            accum_total_ap_vld <= ap_const_logic_1;
        else 
            accum_total_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln61_fu_354_p2 <= std_logic_vector(unsigned(rows_counter) + unsigned(ap_const_lv10_1));
    add_ln65_fu_274_p2 <= std_logic_vector(unsigned(columns_counter) + unsigned(ap_const_lv11_1));
    add_ln70_1_fu_322_p2 <= std_logic_vector(unsigned(zext_ln70_fu_310_p1) + unsigned(zext_ln70_1_fu_318_p1));
    add_ln70_fu_332_p2 <= std_logic_vector(unsigned(zext_ln70_2_fu_328_p1) + unsigned(ap_phi_mux_accum_loc_0_phi_fu_220_p4));
    add_ln76_fu_393_p2 <= std_logic_vector(unsigned(image_ok) + unsigned(ap_const_lv32_1));
    add_ln78_fu_381_p2 <= std_logic_vector(unsigned(image_wr) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(tmp_nbreadreq_fu_112_p9, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(tmp_nbreadreq_fu_112_p9, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(tmp_nbreadreq_fu_112_p9, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(tmp_nbreadreq_fu_112_p9, strm_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_128_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_128 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_360_assign_proc : process(tmp_reg_406, input_data_user_reg_410, input_data_last_reg_414, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_360 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (input_data_last_reg_414 = ap_const_lv1_1) and (input_data_user_reg_410 = ap_const_lv1_0) and (tmp_reg_406 = ap_const_lv1_1));
    end process;


    ap_condition_363_assign_proc : process(tmp_nbreadreq_fu_112_p9, input_data_user_fu_253_p1)
    begin
                ap_condition_363 <= ((input_data_user_fu_253_p1 = ap_const_lv1_1) and (tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_accum_loc_0_phi_fu_220_p4_assign_proc : process(accum, tmp_nbreadreq_fu_112_p9, input_data_user_fu_253_p1, ap_phi_reg_pp0_iter0_accum_loc_0_reg_217)
    begin
        if ((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1)) then
            if ((input_data_user_fu_253_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_accum_loc_0_phi_fu_220_p4 <= ap_const_lv64_0;
            elsif ((input_data_user_fu_253_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_accum_loc_0_phi_fu_220_p4 <= accum;
            else 
                ap_phi_mux_accum_loc_0_phi_fu_220_p4 <= ap_phi_reg_pp0_iter0_accum_loc_0_reg_217;
            end if;
        else 
            ap_phi_mux_accum_loc_0_phi_fu_220_p4 <= ap_phi_reg_pp0_iter0_accum_loc_0_reg_217;
        end if; 
    end process;


    ap_phi_mux_image_ok_loc_0_phi_fu_230_p4_assign_proc : process(image_ok, tmp_reg_406, add_ln76_fu_393_p2, ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227, icmp_ln75_fu_366_p2)
    begin
        if ((tmp_reg_406 = ap_const_lv1_1)) then
            if ((icmp_ln75_fu_366_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 <= image_ok;
            elsif ((icmp_ln75_fu_366_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 <= add_ln76_fu_393_p2;
            else 
                ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 <= ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227;
            end if;
        else 
            ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 <= ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227;
        end if; 
    end process;


    ap_phi_mux_phi_ln72_phi_fu_209_p4_assign_proc : process(tmp_nbreadreq_fu_112_p9, input_data_user_fu_253_p1, phitmp_fu_281_p2, ap_phi_reg_pp0_iter0_phi_ln72_reg_205)
    begin
        if ((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1)) then
            if ((input_data_user_fu_253_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln72_phi_fu_209_p4 <= ap_const_lv32_1;
            elsif ((input_data_user_fu_253_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln72_phi_fu_209_p4 <= phitmp_fu_281_p2;
            else 
                ap_phi_mux_phi_ln72_phi_fu_209_p4 <= ap_phi_reg_pp0_iter0_phi_ln72_reg_205;
            end if;
        else 
            ap_phi_mux_phi_ln72_phi_fu_209_p4 <= ap_phi_reg_pp0_iter0_phi_ln72_reg_205;
        end if; 
    end process;


    ap_phi_mux_storemerge1_phi_fu_240_p4_assign_proc : process(tmp_reg_406, icmp_ln75_fu_366_p2, ap_phi_reg_pp0_iter1_storemerge1_reg_237)
    begin
        if ((tmp_reg_406 = ap_const_lv1_1)) then
            if ((icmp_ln75_fu_366_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_phi_fu_240_p4 <= ap_const_lv1_0;
            elsif ((icmp_ln75_fu_366_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_phi_fu_240_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_storemerge1_phi_fu_240_p4 <= ap_phi_reg_pp0_iter1_storemerge1_reg_237;
            end if;
        else 
            ap_phi_mux_storemerge1_phi_fu_240_p4 <= ap_phi_reg_pp0_iter1_storemerge1_reg_237;
        end if; 
    end process;


    ap_phi_mux_storemerge3_phi_fu_197_p4_assign_proc : process(tmp_nbreadreq_fu_112_p9, input_data_user_fu_253_p1, ap_phi_mux_storemerge_phi_fu_187_p4, ap_phi_reg_pp0_iter0_storemerge3_reg_194)
    begin
        if ((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1)) then
            if ((input_data_user_fu_253_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge3_phi_fu_197_p4 <= ap_const_lv11_0;
            elsif ((input_data_user_fu_253_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge3_phi_fu_197_p4 <= ap_phi_mux_storemerge_phi_fu_187_p4;
            else 
                ap_phi_mux_storemerge3_phi_fu_197_p4 <= ap_phi_reg_pp0_iter0_storemerge3_reg_194;
            end if;
        else 
            ap_phi_mux_storemerge3_phi_fu_197_p4 <= ap_phi_reg_pp0_iter0_storemerge3_reg_194;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_187_p4_assign_proc : process(tmp_nbreadreq_fu_112_p9, input_data_user_fu_253_p1, input_data_last_fu_257_p1, add_ln65_fu_274_p2, ap_phi_reg_pp0_iter0_storemerge_reg_184)
    begin
        if (((input_data_user_fu_253_p1 = ap_const_lv1_0) and (tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1))) then
            if ((input_data_last_fu_257_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_phi_fu_187_p4 <= ap_const_lv11_0;
            elsif ((input_data_last_fu_257_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_phi_fu_187_p4 <= add_ln65_fu_274_p2;
            else 
                ap_phi_mux_storemerge_phi_fu_187_p4 <= ap_phi_reg_pp0_iter0_storemerge_reg_184;
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_187_p4 <= ap_phi_reg_pp0_iter0_storemerge_reg_184;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_accum_loc_0_reg_217 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln72_reg_205 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_storemerge3_reg_194 <= "XXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_storemerge_reg_184 <= "XXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_storemerge1_reg_237 <= "X";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln75_fu_366_p2 <= "1" when (phi_ln72_reg_205 = total_size) else "0";
    input_data_last_fu_257_p1 <= strm_in_TLAST_int_regslice;
    input_data_user_fu_253_p1 <= strm_in_TUSER_int_regslice;
    phitmp_fu_281_p2 <= std_logic_vector(unsigned(numWrites) + unsigned(ap_const_lv32_1));

    processed_elem_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_406, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            processed_elem_ap_vld <= ap_const_logic_1;
        else 
            processed_elem_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    received <= ap_phi_mux_storemerge1_phi_fu_240_p4;

    received_img_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_406, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            received_img_ap_vld <= ap_const_logic_1;
        else 
            received_img_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_nbreadreq_fu_112_p9, strm_in_TVALID_int_regslice)
    begin
        if (((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TDATA_blk_n <= strm_in_TVALID_int_regslice;
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_in_TREADY <= regslice_both_strm_in_V_data_V_U_ack_in;

    strm_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_112_p9, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_112_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            strm_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_112_p9 <= (0=>(strm_in_TVALID_int_regslice), others=>'-');
    tmp_s_fu_300_p4 <= strm_in_TDATA_int_regslice(63 downto 32);
    trunc_ln70_fu_314_p1 <= strm_in_TDATA_int_regslice(32 - 1 downto 0);
    zext_ln70_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln70_fu_314_p1),33));
    zext_ln70_2_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_1_fu_322_p2),64));
    zext_ln70_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_300_p4),33));
end behav;
