// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="colector_display_colector_display,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.072000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=496,HLS_SYN_LUT=782,HLS_VERSION=2023_1}" *)

module colector_display (
        ap_clk,
        ap_rst_n,
        strm_in_TDATA,
        strm_in_TVALID,
        strm_in_TREADY,
        strm_in_TKEEP,
        strm_in_TSTRB,
        strm_in_TUSER,
        strm_in_TLAST,
        strm_in_TID,
        strm_in_TDEST,
        received,
        s_axi_Axi_lite_AWVALID,
        s_axi_Axi_lite_AWREADY,
        s_axi_Axi_lite_AWADDR,
        s_axi_Axi_lite_WVALID,
        s_axi_Axi_lite_WREADY,
        s_axi_Axi_lite_WDATA,
        s_axi_Axi_lite_WSTRB,
        s_axi_Axi_lite_ARVALID,
        s_axi_Axi_lite_ARREADY,
        s_axi_Axi_lite_ARADDR,
        s_axi_Axi_lite_RVALID,
        s_axi_Axi_lite_RREADY,
        s_axi_Axi_lite_RDATA,
        s_axi_Axi_lite_RRESP,
        s_axi_Axi_lite_BVALID,
        s_axi_Axi_lite_BREADY,
        s_axi_Axi_lite_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXI_LITE_DATA_WIDTH = 32;
parameter    C_S_AXI_AXI_LITE_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXI_LITE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] strm_in_TDATA;
input   strm_in_TVALID;
output   strm_in_TREADY;
input  [7:0] strm_in_TKEEP;
input  [7:0] strm_in_TSTRB;
input  [0:0] strm_in_TUSER;
input  [0:0] strm_in_TLAST;
input  [0:0] strm_in_TID;
input  [0:0] strm_in_TDEST;
output  [0:0] received;
input   s_axi_Axi_lite_AWVALID;
output   s_axi_Axi_lite_AWREADY;
input  [C_S_AXI_AXI_LITE_ADDR_WIDTH - 1:0] s_axi_Axi_lite_AWADDR;
input   s_axi_Axi_lite_WVALID;
output   s_axi_Axi_lite_WREADY;
input  [C_S_AXI_AXI_LITE_DATA_WIDTH - 1:0] s_axi_Axi_lite_WDATA;
input  [C_S_AXI_AXI_LITE_WSTRB_WIDTH - 1:0] s_axi_Axi_lite_WSTRB;
input   s_axi_Axi_lite_ARVALID;
output   s_axi_Axi_lite_ARREADY;
input  [C_S_AXI_AXI_LITE_ADDR_WIDTH - 1:0] s_axi_Axi_lite_ARADDR;
output   s_axi_Axi_lite_RVALID;
input   s_axi_Axi_lite_RREADY;
output  [C_S_AXI_AXI_LITE_DATA_WIDTH - 1:0] s_axi_Axi_lite_RDATA;
output  [1:0] s_axi_Axi_lite_RRESP;
output   s_axi_Axi_lite_BVALID;
input   s_axi_Axi_lite_BREADY;
output  [1:0] s_axi_Axi_lite_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] total_size;
reg    accum_total_ap_vld;
reg    processed_elem_ap_vld;
reg    received_img_ap_vld;
reg   [31:0] numWrites;
reg   [63:0] accum;
reg   [9:0] rows_counter;
reg   [10:0] columns_counter;
reg   [31:0] image_ok;
reg   [31:0] image_wr;
reg    strm_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_nbreadreq_fu_112_p9;
reg   [31:0] phi_ln72_reg_205;
reg   [0:0] tmp_reg_406;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] input_data_user_fu_253_p1;
reg   [0:0] input_data_user_reg_410;
wire   [0:0] input_data_last_fu_257_p1;
reg   [0:0] input_data_last_reg_414;
wire   [63:0] add_ln70_fu_332_p2;
reg   [63:0] add_ln70_reg_418;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [10:0] ap_phi_mux_storemerge_phi_fu_187_p4;
wire   [10:0] add_ln65_fu_274_p2;
wire   [10:0] ap_phi_reg_pp0_iter0_storemerge_reg_184;
reg   [10:0] ap_phi_mux_storemerge3_phi_fu_197_p4;
wire   [10:0] ap_phi_reg_pp0_iter0_storemerge3_reg_194;
reg   [31:0] ap_phi_mux_phi_ln72_phi_fu_209_p4;
wire   [31:0] phitmp_fu_281_p2;
wire   [31:0] ap_phi_reg_pp0_iter0_phi_ln72_reg_205;
reg   [63:0] ap_phi_mux_accum_loc_0_phi_fu_220_p4;
wire   [63:0] ap_phi_reg_pp0_iter0_accum_loc_0_reg_217;
reg   [31:0] ap_phi_mux_image_ok_loc_0_phi_fu_230_p4;
wire   [31:0] add_ln76_fu_393_p2;
wire   [31:0] ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227;
wire   [0:0] icmp_ln75_fu_366_p2;
reg   [0:0] ap_phi_mux_storemerge1_phi_fu_240_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_storemerge1_reg_237;
wire   [9:0] add_ln61_fu_354_p2;
wire   [31:0] add_ln78_fu_381_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_s_fu_300_p4;
wire   [31:0] trunc_ln70_fu_314_p1;
wire   [32:0] zext_ln70_fu_310_p1;
wire   [32:0] zext_ln70_1_fu_318_p1;
wire   [32:0] add_ln70_1_fu_322_p2;
wire   [63:0] zext_ln70_2_fu_328_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_strm_in_V_data_V_U_apdone_blk;
wire   [63:0] strm_in_TDATA_int_regslice;
wire    strm_in_TVALID_int_regslice;
reg    strm_in_TREADY_int_regslice;
wire    regslice_both_strm_in_V_data_V_U_ack_in;
wire    regslice_both_strm_in_V_keep_V_U_apdone_blk;
wire   [7:0] strm_in_TKEEP_int_regslice;
wire    regslice_both_strm_in_V_keep_V_U_vld_out;
wire    regslice_both_strm_in_V_keep_V_U_ack_in;
wire    regslice_both_strm_in_V_strb_V_U_apdone_blk;
wire   [7:0] strm_in_TSTRB_int_regslice;
wire    regslice_both_strm_in_V_strb_V_U_vld_out;
wire    regslice_both_strm_in_V_strb_V_U_ack_in;
wire    regslice_both_strm_in_V_user_V_U_apdone_blk;
wire   [0:0] strm_in_TUSER_int_regslice;
wire    regslice_both_strm_in_V_user_V_U_vld_out;
wire    regslice_both_strm_in_V_user_V_U_ack_in;
wire    regslice_both_strm_in_V_last_V_U_apdone_blk;
wire   [0:0] strm_in_TLAST_int_regslice;
wire    regslice_both_strm_in_V_last_V_U_vld_out;
wire    regslice_both_strm_in_V_last_V_U_ack_in;
wire    regslice_both_strm_in_V_id_V_U_apdone_blk;
wire   [0:0] strm_in_TID_int_regslice;
wire    regslice_both_strm_in_V_id_V_U_vld_out;
wire    regslice_both_strm_in_V_id_V_U_ack_in;
wire    regslice_both_strm_in_V_dest_V_U_apdone_blk;
wire   [0:0] strm_in_TDEST_int_regslice;
wire    regslice_both_strm_in_V_dest_V_U_vld_out;
wire    regslice_both_strm_in_V_dest_V_U_ack_in;
reg    ap_condition_128;
reg    ap_condition_360;
reg    ap_condition_363;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 numWrites = 32'd0;
#0 accum = 64'd0;
#0 rows_counter = 10'd0;
#0 columns_counter = 11'd0;
#0 image_ok = 32'd0;
#0 image_wr = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

colector_display_Axi_lite_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXI_LITE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXI_LITE_DATA_WIDTH ))
Axi_lite_s_axi_U(
    .AWVALID(s_axi_Axi_lite_AWVALID),
    .AWREADY(s_axi_Axi_lite_AWREADY),
    .AWADDR(s_axi_Axi_lite_AWADDR),
    .WVALID(s_axi_Axi_lite_WVALID),
    .WREADY(s_axi_Axi_lite_WREADY),
    .WDATA(s_axi_Axi_lite_WDATA),
    .WSTRB(s_axi_Axi_lite_WSTRB),
    .ARVALID(s_axi_Axi_lite_ARVALID),
    .ARREADY(s_axi_Axi_lite_ARREADY),
    .ARADDR(s_axi_Axi_lite_ARADDR),
    .RVALID(s_axi_Axi_lite_RVALID),
    .RREADY(s_axi_Axi_lite_RREADY),
    .RDATA(s_axi_Axi_lite_RDATA),
    .RRESP(s_axi_Axi_lite_RRESP),
    .BVALID(s_axi_Axi_lite_BVALID),
    .BREADY(s_axi_Axi_lite_BREADY),
    .BRESP(s_axi_Axi_lite_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .total_size(total_size),
    .accum_total(add_ln70_reg_418),
    .accum_total_ap_vld(accum_total_ap_vld),
    .processed_elem(phi_ln72_reg_205),
    .processed_elem_ap_vld(processed_elem_ap_vld),
    .received_img(ap_phi_mux_image_ok_loc_0_phi_fu_230_p4),
    .received_img_ap_vld(received_img_ap_vld)
);

colector_display_regslice_both #(
    .DataWidth( 64 ))
regslice_both_strm_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TDATA),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_data_V_U_ack_in),
    .data_out(strm_in_TDATA_int_regslice),
    .vld_out(strm_in_TVALID_int_regslice),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_data_V_U_apdone_blk)
);

colector_display_regslice_both #(
    .DataWidth( 8 ))
regslice_both_strm_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TKEEP),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_keep_V_U_ack_in),
    .data_out(strm_in_TKEEP_int_regslice),
    .vld_out(regslice_both_strm_in_V_keep_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_keep_V_U_apdone_blk)
);

colector_display_regslice_both #(
    .DataWidth( 8 ))
regslice_both_strm_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TSTRB),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_strb_V_U_ack_in),
    .data_out(strm_in_TSTRB_int_regslice),
    .vld_out(regslice_both_strm_in_V_strb_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_strb_V_U_apdone_blk)
);

colector_display_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TUSER),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_user_V_U_ack_in),
    .data_out(strm_in_TUSER_int_regslice),
    .vld_out(regslice_both_strm_in_V_user_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_user_V_U_apdone_blk)
);

colector_display_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TLAST),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_last_V_U_ack_in),
    .data_out(strm_in_TLAST_int_regslice),
    .vld_out(regslice_both_strm_in_V_last_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_last_V_U_apdone_blk)
);

colector_display_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TID),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_id_V_U_ack_in),
    .data_out(strm_in_TID_int_regslice),
    .vld_out(regslice_both_strm_in_V_id_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_id_V_U_apdone_blk)
);

colector_display_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TDEST),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_dest_V_U_ack_in),
    .data_out(strm_in_TDEST_int_regslice),
    .vld_out(regslice_both_strm_in_V_dest_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_128)) begin
        if (((input_data_user_fu_253_p1 == 1'd1) & (tmp_nbreadreq_fu_112_p9 == 1'd1))) begin
            phi_ln72_reg_205 <= 32'd1;
        end else if (((input_data_user_fu_253_p1 == 1'd0) & (tmp_nbreadreq_fu_112_p9 == 1'd1))) begin
            phi_ln72_reg_205 <= phitmp_fu_281_p2;
        end else if ((1'b1 == 1'b1)) begin
            phi_ln72_reg_205 <= ap_phi_reg_pp0_iter0_phi_ln72_reg_205;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_363)) begin
            rows_counter <= 10'd0;
        end else if ((1'b1 == ap_condition_360)) begin
            rows_counter <= add_ln61_fu_354_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        accum <= add_ln70_fu_332_p2;
        columns_counter <= ap_phi_mux_storemerge3_phi_fu_197_p4;
        numWrites <= ap_phi_mux_phi_ln72_phi_fu_209_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln70_reg_418 <= add_ln70_fu_332_p2;
        input_data_last_reg_414 <= strm_in_TLAST_int_regslice;
        input_data_user_reg_410 <= strm_in_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln75_fu_366_p2 == 1'd1))) begin
        image_ok <= add_ln76_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln75_fu_366_p2 == 1'd0))) begin
        image_wr <= add_ln78_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_406 <= tmp_nbreadreq_fu_112_p9;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        accum_total_ap_vld = 1'b1;
    end else begin
        accum_total_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_112_p9 == 1'd1)) begin
        if ((input_data_user_fu_253_p1 == 1'd1)) begin
            ap_phi_mux_accum_loc_0_phi_fu_220_p4 = 64'd0;
        end else if ((input_data_user_fu_253_p1 == 1'd0)) begin
            ap_phi_mux_accum_loc_0_phi_fu_220_p4 = accum;
        end else begin
            ap_phi_mux_accum_loc_0_phi_fu_220_p4 = ap_phi_reg_pp0_iter0_accum_loc_0_reg_217;
        end
    end else begin
        ap_phi_mux_accum_loc_0_phi_fu_220_p4 = ap_phi_reg_pp0_iter0_accum_loc_0_reg_217;
    end
end

always @ (*) begin
    if ((tmp_reg_406 == 1'd1)) begin
        if ((icmp_ln75_fu_366_p2 == 1'd0)) begin
            ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 = image_ok;
        end else if ((icmp_ln75_fu_366_p2 == 1'd1)) begin
            ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 = add_ln76_fu_393_p2;
        end else begin
            ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 = ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227;
        end
    end else begin
        ap_phi_mux_image_ok_loc_0_phi_fu_230_p4 = ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_112_p9 == 1'd1)) begin
        if ((input_data_user_fu_253_p1 == 1'd1)) begin
            ap_phi_mux_phi_ln72_phi_fu_209_p4 = 32'd1;
        end else if ((input_data_user_fu_253_p1 == 1'd0)) begin
            ap_phi_mux_phi_ln72_phi_fu_209_p4 = phitmp_fu_281_p2;
        end else begin
            ap_phi_mux_phi_ln72_phi_fu_209_p4 = ap_phi_reg_pp0_iter0_phi_ln72_reg_205;
        end
    end else begin
        ap_phi_mux_phi_ln72_phi_fu_209_p4 = ap_phi_reg_pp0_iter0_phi_ln72_reg_205;
    end
end

always @ (*) begin
    if ((tmp_reg_406 == 1'd1)) begin
        if ((icmp_ln75_fu_366_p2 == 1'd0)) begin
            ap_phi_mux_storemerge1_phi_fu_240_p4 = 1'd0;
        end else if ((icmp_ln75_fu_366_p2 == 1'd1)) begin
            ap_phi_mux_storemerge1_phi_fu_240_p4 = 1'd1;
        end else begin
            ap_phi_mux_storemerge1_phi_fu_240_p4 = ap_phi_reg_pp0_iter1_storemerge1_reg_237;
        end
    end else begin
        ap_phi_mux_storemerge1_phi_fu_240_p4 = ap_phi_reg_pp0_iter1_storemerge1_reg_237;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_112_p9 == 1'd1)) begin
        if ((input_data_user_fu_253_p1 == 1'd1)) begin
            ap_phi_mux_storemerge3_phi_fu_197_p4 = 11'd0;
        end else if ((input_data_user_fu_253_p1 == 1'd0)) begin
            ap_phi_mux_storemerge3_phi_fu_197_p4 = ap_phi_mux_storemerge_phi_fu_187_p4;
        end else begin
            ap_phi_mux_storemerge3_phi_fu_197_p4 = ap_phi_reg_pp0_iter0_storemerge3_reg_194;
        end
    end else begin
        ap_phi_mux_storemerge3_phi_fu_197_p4 = ap_phi_reg_pp0_iter0_storemerge3_reg_194;
    end
end

always @ (*) begin
    if (((input_data_user_fu_253_p1 == 1'd0) & (tmp_nbreadreq_fu_112_p9 == 1'd1))) begin
        if ((input_data_last_fu_257_p1 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_187_p4 = 11'd0;
        end else if ((input_data_last_fu_257_p1 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_187_p4 = add_ln65_fu_274_p2;
        end else begin
            ap_phi_mux_storemerge_phi_fu_187_p4 = ap_phi_reg_pp0_iter0_storemerge_reg_184;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_187_p4 = ap_phi_reg_pp0_iter0_storemerge_reg_184;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        processed_elem_ap_vld = 1'b1;
    end else begin
        processed_elem_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_406 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        received_img_ap_vld = 1'b1;
    end else begin
        received_img_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TDATA_blk_n = strm_in_TVALID_int_regslice;
    end else begin
        strm_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TREADY_int_regslice = 1'b1;
    end else begin
        strm_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln61_fu_354_p2 = (rows_counter + 10'd1);

assign add_ln65_fu_274_p2 = (columns_counter + 11'd1);

assign add_ln70_1_fu_322_p2 = (zext_ln70_fu_310_p1 + zext_ln70_1_fu_318_p1);

assign add_ln70_fu_332_p2 = (zext_ln70_2_fu_328_p1 + ap_phi_mux_accum_loc_0_phi_fu_220_p4);

assign add_ln76_fu_393_p2 = (image_ok + 32'd1);

assign add_ln78_fu_381_p2 = (image_wr + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b1 == 1'b1) & (strm_in_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b1 == 1'b1) & (strm_in_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b1 == 1'b1) & (strm_in_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((tmp_nbreadreq_fu_112_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_128 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_360 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (input_data_last_reg_414 == 1'd1) & (input_data_user_reg_410 == 1'd0) & (tmp_reg_406 == 1'd1));
end

always @ (*) begin
    ap_condition_363 = ((input_data_user_fu_253_p1 == 1'd1) & (tmp_nbreadreq_fu_112_p9 == 1'd1) & (1'b1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_accum_loc_0_reg_217 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln72_reg_205 = 'bx;

assign ap_phi_reg_pp0_iter0_storemerge3_reg_194 = 'bx;

assign ap_phi_reg_pp0_iter0_storemerge_reg_184 = 'bx;

assign ap_phi_reg_pp0_iter1_image_ok_loc_0_reg_227 = 'bx;

assign ap_phi_reg_pp0_iter1_storemerge1_reg_237 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln75_fu_366_p2 = ((phi_ln72_reg_205 == total_size) ? 1'b1 : 1'b0);

assign input_data_last_fu_257_p1 = strm_in_TLAST_int_regslice;

assign input_data_user_fu_253_p1 = strm_in_TUSER_int_regslice;

assign phitmp_fu_281_p2 = (numWrites + 32'd1);

assign received = ap_phi_mux_storemerge1_phi_fu_240_p4;

assign strm_in_TREADY = regslice_both_strm_in_V_data_V_U_ack_in;

assign tmp_nbreadreq_fu_112_p9 = strm_in_TVALID_int_regslice;

assign tmp_s_fu_300_p4 = {{strm_in_TDATA_int_regslice[63:32]}};

assign trunc_ln70_fu_314_p1 = strm_in_TDATA_int_regslice[31:0];

assign zext_ln70_1_fu_318_p1 = trunc_ln70_fu_314_p1;

assign zext_ln70_2_fu_328_p1 = add_ln70_1_fu_322_p2;

assign zext_ln70_fu_310_p1 = tmp_s_fu_300_p4;


reg find_kernel_block = 0;
// synthesis translate_off
`include "colector_display_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //colector_display

