-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wr_data_dir_adv is
generic (
    C_S_AXI_AXI_LITE_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXI_LITE_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    strm_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    strm_in_TVALID : IN STD_LOGIC;
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_dir_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_dir_TVALID : OUT STD_LOGIC;
    s_dir_TREADY : IN STD_LOGIC;
    s_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_data_TVALID : OUT STD_LOGIC;
    s_data_TREADY : IN STD_LOGIC;
    frame_ptr : IN STD_LOGIC_VECTOR (1 downto 0);
    completed : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_Axi_lite_AWVALID : IN STD_LOGIC;
    s_axi_Axi_lite_AWREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_ADDR_WIDTH-1 downto 0);
    s_axi_Axi_lite_WVALID : IN STD_LOGIC;
    s_axi_Axi_lite_WREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH-1 downto 0);
    s_axi_Axi_lite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH/8-1 downto 0);
    s_axi_Axi_lite_ARVALID : IN STD_LOGIC;
    s_axi_Axi_lite_ARREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_ADDR_WIDTH-1 downto 0);
    s_axi_Axi_lite_RVALID : OUT STD_LOGIC;
    s_axi_Axi_lite_RREADY : IN STD_LOGIC;
    s_axi_Axi_lite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH-1 downto 0);
    s_axi_Axi_lite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Axi_lite_BVALID : OUT STD_LOGIC;
    s_axi_Axi_lite_BREADY : IN STD_LOGIC;
    s_axi_Axi_lite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of wr_data_dir_adv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "wr_data_dir_adv_wr_data_dir_adv,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.140000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1100,HLS_SYN_LUT=1057,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal base_addr_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_img : STD_LOGIC_VECTOR (31 downto 0);
    signal total_size : STD_LOGIC_VECTOR (31 downto 0);
    signal processed_elem_ap_vld : STD_LOGIC;
    signal numWrites : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal count_frame : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_nbreadreq_fu_180_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal tmp_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_521_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal tmp_reg_521_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_dir_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_data_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_dir_TDATA_blk_n : STD_LOGIC;
    signal s_data_TDATA_blk_n : STD_LOGIC;
    signal total_size_read_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_ptr_read_reg_494 : STD_LOGIC_VECTOR (1 downto 0);
    signal frame_ptr_read_reg_494_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal frame_ptr_read_reg_494_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal base_addr_3_read_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_3_read_reg_501_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_3_read_reg_501_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_2_read_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_2_read_reg_506_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_2_read_reg_506_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_1_read_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_1_read_reg_511_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_1_read_reg_511_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_0_read_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_0_read_reg_516_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr_0_read_reg_516_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_521_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_525 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_reg_525_pp0_iter1_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_reg_525_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal col_reg_530 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_reg_530_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln87_fu_314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln87_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln87_reg_545_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln87_reg_545_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln89_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_551_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_storemerge_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln90_fu_465_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal row_fu_286_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_fu_272_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln87_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_347_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_477_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_fu_365_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_401_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln79_2_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_3_fu_410_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_2_fu_392_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_1_fu_374_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_fu_356_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln79_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln79_1_fu_448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_477_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_477_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_477_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_477_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal strm_in_TVALID_int_regslice : STD_LOGIC;
    signal strm_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_strm_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_strm_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_user_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_id_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_dest_V_U_ack_in : STD_LOGIC;
    signal s_dir_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_dir_TVALID_int_regslice : STD_LOGIC;
    signal s_dir_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_dir_U_vld_out : STD_LOGIC;
    signal s_data_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_data_TVALID_int_regslice : STD_LOGIC;
    signal s_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_data_U_vld_out : STD_LOGIC;
    signal grp_fu_477_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_477_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_477_p20 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_condition_225 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component wr_data_dir_adv_mac_muladd_12ns_11ns_11ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component wr_data_dir_adv_Axi_lite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        base_addr_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        base_addr_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        base_addr_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        base_addr_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_img : OUT STD_LOGIC_VECTOR (31 downto 0);
        total_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        processed_elem : IN STD_LOGIC_VECTOR (31 downto 0);
        processed_elem_ap_vld : IN STD_LOGIC );
    end component;


    component wr_data_dir_adv_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    Axi_lite_s_axi_U : component wr_data_dir_adv_Axi_lite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_LITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_LITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Axi_lite_AWVALID,
        AWREADY => s_axi_Axi_lite_AWREADY,
        AWADDR => s_axi_Axi_lite_AWADDR,
        WVALID => s_axi_Axi_lite_WVALID,
        WREADY => s_axi_Axi_lite_WREADY,
        WDATA => s_axi_Axi_lite_WDATA,
        WSTRB => s_axi_Axi_lite_WSTRB,
        ARVALID => s_axi_Axi_lite_ARVALID,
        ARREADY => s_axi_Axi_lite_ARREADY,
        ARADDR => s_axi_Axi_lite_ARADDR,
        RVALID => s_axi_Axi_lite_RVALID,
        RREADY => s_axi_Axi_lite_RREADY,
        RDATA => s_axi_Axi_lite_RDATA,
        RRESP => s_axi_Axi_lite_RRESP,
        BVALID => s_axi_Axi_lite_BVALID,
        BREADY => s_axi_Axi_lite_BREADY,
        BRESP => s_axi_Axi_lite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        base_addr_0 => base_addr_0,
        base_addr_1 => base_addr_1,
        base_addr_2 => base_addr_2,
        base_addr_3 => base_addr_3,
        width_img => width_img,
        total_size => total_size,
        processed_elem => select_ln87_reg_545_pp0_iter2_reg,
        processed_elem_ap_vld => processed_elem_ap_vld);

    mac_muladd_12ns_11ns_11ns_22_4_1_U1 : component wr_data_dir_adv_mac_muladd_12ns_11ns_11ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_477_p0,
        din1 => grp_fu_477_p1,
        din2 => grp_fu_477_p2,
        ce => grp_fu_477_ce,
        dout => grp_fu_477_p3);

    regslice_both_strm_in_V_data_V_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TDATA,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_data_V_U_ack_in,
        data_out => strm_in_TDATA_int_regslice,
        vld_out => strm_in_TVALID_int_regslice,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_data_V_U_apdone_blk);

    regslice_both_strm_in_V_keep_V_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TKEEP,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_keep_V_U_ack_in,
        data_out => strm_in_TKEEP_int_regslice,
        vld_out => regslice_both_strm_in_V_keep_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_keep_V_U_apdone_blk);

    regslice_both_strm_in_V_strb_V_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TSTRB,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_strb_V_U_ack_in,
        data_out => strm_in_TSTRB_int_regslice,
        vld_out => regslice_both_strm_in_V_strb_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_strb_V_U_apdone_blk);

    regslice_both_strm_in_V_user_V_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TUSER,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_user_V_U_ack_in,
        data_out => strm_in_TUSER_int_regslice,
        vld_out => regslice_both_strm_in_V_user_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_user_V_U_apdone_blk);

    regslice_both_strm_in_V_last_V_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TLAST,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_last_V_U_ack_in,
        data_out => strm_in_TLAST_int_regslice,
        vld_out => regslice_both_strm_in_V_last_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_last_V_U_apdone_blk);

    regslice_both_strm_in_V_id_V_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TID,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_id_V_U_ack_in,
        data_out => strm_in_TID_int_regslice,
        vld_out => regslice_both_strm_in_V_id_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_id_V_U_apdone_blk);

    regslice_both_strm_in_V_dest_V_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TDEST,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_dest_V_U_ack_in,
        data_out => strm_in_TDEST_int_regslice,
        vld_out => regslice_both_strm_in_V_dest_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_dest_V_U_apdone_blk);

    regslice_both_s_dir_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_dir_TDATA_int_regslice,
        vld_in => s_dir_TVALID_int_regslice,
        ack_in => s_dir_TREADY_int_regslice,
        data_out => s_dir_TDATA,
        vld_out => regslice_both_s_dir_U_vld_out,
        ack_out => s_dir_TREADY,
        apdone_blk => regslice_both_s_dir_U_apdone_blk);

    regslice_both_s_data_U : component wr_data_dir_adv_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_data_TDATA_int_regslice,
        vld_in => s_data_TVALID_int_regslice,
        ack_in => s_data_TREADY_int_regslice,
        data_out => s_data_TDATA,
        vld_out => regslice_both_s_data_U_vld_out,
        ack_out => s_data_TREADY,
        apdone_blk => regslice_both_s_data_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_storemerge_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_225)) then
                if (((tmp_reg_521 = ap_const_lv1_1) and (icmp_ln89_fu_328_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_storemerge_reg_246 <= ap_const_lv1_0;
                elsif (((tmp_reg_521 = ap_const_lv1_1) and (icmp_ln89_fu_328_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_storemerge_reg_246 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_reg_246 <= ap_phi_reg_pp0_iter1_storemerge_reg_246;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storemerge_reg_246 <= ap_phi_reg_pp0_iter0_storemerge_reg_246;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_246 <= ap_phi_reg_pp0_iter2_storemerge_reg_246;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_storemerge_reg_246 <= ap_phi_reg_pp0_iter3_storemerge_reg_246;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                base_addr_0_read_reg_516 <= base_addr_0;
                base_addr_0_read_reg_516_pp0_iter1_reg <= base_addr_0_read_reg_516;
                base_addr_1_read_reg_511 <= base_addr_1;
                base_addr_1_read_reg_511_pp0_iter1_reg <= base_addr_1_read_reg_511;
                base_addr_2_read_reg_506 <= base_addr_2;
                base_addr_2_read_reg_506_pp0_iter1_reg <= base_addr_2_read_reg_506;
                base_addr_3_read_reg_501 <= base_addr_3;
                base_addr_3_read_reg_501_pp0_iter1_reg <= base_addr_3_read_reg_501;
                col_reg_530_pp0_iter1_reg <= col_reg_530;
                frame_ptr_read_reg_494 <= frame_ptr;
                frame_ptr_read_reg_494_pp0_iter1_reg <= frame_ptr_read_reg_494;
                select_ln87_reg_545_pp0_iter1_reg <= select_ln87_reg_545;
                tmp_reg_521 <= tmp_nbreadreq_fu_180_p9;
                tmp_reg_521_pp0_iter1_reg <= tmp_reg_521;
                tmp_s_reg_525_pp0_iter1_reg <= tmp_s_reg_525;
                total_size_read_reg_489 <= total_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                base_addr_0_read_reg_516_pp0_iter2_reg <= base_addr_0_read_reg_516_pp0_iter1_reg;
                base_addr_1_read_reg_511_pp0_iter2_reg <= base_addr_1_read_reg_511_pp0_iter1_reg;
                base_addr_2_read_reg_506_pp0_iter2_reg <= base_addr_2_read_reg_506_pp0_iter1_reg;
                base_addr_3_read_reg_501_pp0_iter2_reg <= base_addr_3_read_reg_501_pp0_iter1_reg;
                frame_ptr_read_reg_494_pp0_iter2_reg <= frame_ptr_read_reg_494_pp0_iter1_reg;
                icmp_ln89_reg_551_pp0_iter2_reg <= icmp_ln89_reg_551;
                select_ln87_reg_545_pp0_iter2_reg <= select_ln87_reg_545_pp0_iter1_reg;
                tmp_reg_521_pp0_iter2_reg <= tmp_reg_521_pp0_iter1_reg;
                tmp_reg_521_pp0_iter3_reg <= tmp_reg_521_pp0_iter2_reg;
                tmp_s_reg_525_pp0_iter2_reg <= tmp_s_reg_525_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                col_reg_530 <= strm_in_TDATA_int_regslice(26 downto 16);
                select_ln87_reg_545 <= select_ln87_fu_314_p3;
                tmp_s_reg_525 <= strm_in_TDATA_int_regslice(55 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln89_reg_551_pp0_iter2_reg = ap_const_lv1_1))) then
                count_frame <= add_ln90_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln89_reg_551 <= icmp_ln89_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                numWrites <= select_ln87_fu_314_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln87_fu_308_p2 <= std_logic_vector(unsigned(numWrites) + unsigned(ap_const_lv32_1));
    add_ln90_fu_465_p2 <= std_logic_vector(unsigned(count_frame) + unsigned(ap_const_lv8_1));
    addr_1_fu_374_p4 <= ((tmp_2_fu_365_p4 & grp_fu_477_p3) & ap_const_lv2_0);
    addr_2_fu_392_p4 <= ((tmp_3_fu_383_p4 & grp_fu_477_p3) & ap_const_lv2_0);
    addr_3_fu_410_p4 <= ((tmp_4_fu_401_p4 & grp_fu_477_p3) & ap_const_lv2_0);
    addr_fu_356_p4 <= ((tmp_1_fu_347_p4 & grp_fu_477_p3) & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_nbreadreq_fu_180_p9, tmp_reg_521_pp0_iter2_reg, tmp_reg_521_pp0_iter3_reg, regslice_both_s_dir_U_apdone_blk, regslice_both_s_data_U_apdone_blk, ap_enable_reg_pp0_iter4, strm_in_TVALID_int_regslice, s_dir_TREADY_int_regslice, s_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((regslice_both_s_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_dir_U_apdone_blk = ap_const_logic_1) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_const_logic_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_nbreadreq_fu_180_p9, tmp_reg_521_pp0_iter2_reg, ap_block_state4_io, tmp_reg_521_pp0_iter3_reg, regslice_both_s_dir_U_apdone_blk, regslice_both_s_data_U_apdone_blk, ap_block_state5_io, ap_enable_reg_pp0_iter4, strm_in_TVALID_int_regslice, s_dir_TREADY_int_regslice, s_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((regslice_both_s_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_dir_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state5_io) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_const_logic_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_nbreadreq_fu_180_p9, tmp_reg_521_pp0_iter2_reg, ap_block_state4_io, tmp_reg_521_pp0_iter3_reg, regslice_both_s_dir_U_apdone_blk, regslice_both_s_data_U_apdone_blk, ap_block_state5_io, ap_enable_reg_pp0_iter4, strm_in_TVALID_int_regslice, s_dir_TREADY_int_regslice, s_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((regslice_both_s_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_dir_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state5_io) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_const_logic_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(tmp_nbreadreq_fu_180_p9, strm_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(tmp_reg_521_pp0_iter2_reg, s_dir_TREADY_int_regslice, s_data_TREADY_int_regslice)
    begin
                ap_block_state4_io <= (((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(tmp_reg_521_pp0_iter2_reg, s_dir_TREADY_int_regslice, s_data_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state5_io_assign_proc : process(tmp_reg_521_pp0_iter3_reg, s_dir_TREADY_int_regslice, s_data_TREADY_int_regslice)
    begin
                ap_block_state5_io <= (((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(tmp_reg_521_pp0_iter3_reg, regslice_both_s_dir_U_apdone_blk, regslice_both_s_data_U_apdone_blk, s_dir_TREADY_int_regslice, s_data_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((regslice_both_s_data_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_dir_U_apdone_blk = ap_const_logic_1) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_data_TREADY_int_regslice = ap_const_logic_0)) or ((tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1) and (s_dir_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_225_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_225 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_reg_246 <= "X";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    completed <= ap_phi_reg_pp0_iter4_storemerge_reg_246;

    grp_fu_477_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_477_ce <= ap_const_logic_1;
        else 
            grp_fu_477_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_477_p0 <= grp_fu_477_p00(12 - 1 downto 0);
    grp_fu_477_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_fu_272_p1),22));
    grp_fu_477_p1 <= grp_fu_477_p10(11 - 1 downto 0);
    grp_fu_477_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_fu_286_p1),22));
    grp_fu_477_p2 <= grp_fu_477_p20(11 - 1 downto 0);
    grp_fu_477_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_530_pp0_iter1_reg),22));
    icmp_ln79_1_fu_424_p2 <= "1" when (frame_ptr_read_reg_494_pp0_iter2_reg = ap_const_lv2_1) else "0";
    icmp_ln79_2_fu_429_p2 <= "1" when (frame_ptr_read_reg_494_pp0_iter2_reg = ap_const_lv2_2) else "0";
    icmp_ln79_fu_419_p2 <= "1" when (frame_ptr_read_reg_494_pp0_iter2_reg = ap_const_lv2_0) else "0";
    icmp_ln89_fu_328_p2 <= "1" when (select_ln87_reg_545 = total_size_read_reg_489) else "0";
    or_ln79_fu_442_p2 <= (icmp_ln79_2_fu_429_p2 or icmp_ln79_1_fu_424_p2);

    processed_elem_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_reg_521_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            processed_elem_ap_vld <= ap_const_logic_1;
        else 
            processed_elem_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    row_fu_286_p1 <= strm_in_TDATA_int_regslice(11 - 1 downto 0);

    s_data_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_reg_521_pp0_iter2_reg, tmp_reg_521_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, s_data_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            s_data_TDATA_blk_n <= s_data_TREADY_int_regslice;
        else 
            s_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_data_TDATA_int_regslice <= (count_frame & tmp_s_reg_525_pp0_iter2_reg);
    s_data_TVALID <= regslice_both_s_data_U_vld_out;

    s_data_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_reg_521_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            s_data_TVALID_int_regslice <= ap_const_logic_1;
        else 
            s_data_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_dir_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_reg_521_pp0_iter2_reg, tmp_reg_521_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, s_dir_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_521_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            s_dir_TDATA_blk_n <= s_dir_TREADY_int_regslice;
        else 
            s_dir_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_dir_TDATA_int_regslice <= 
        select_ln79_fu_434_p3 when (or_ln79_fu_442_p2(0) = '1') else 
        select_ln79_1_fu_448_p3;
    s_dir_TVALID <= regslice_both_s_dir_U_vld_out;

    s_dir_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_reg_521_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_521_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            s_dir_TVALID_int_regslice <= ap_const_logic_1;
        else 
            s_dir_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln79_1_fu_448_p3 <= 
        addr_1_fu_374_p4 when (icmp_ln79_fu_419_p2(0) = '1') else 
        addr_fu_356_p4;
    select_ln79_fu_434_p3 <= 
        addr_3_fu_410_p4 when (icmp_ln79_2_fu_429_p2(0) = '1') else 
        addr_2_fu_392_p4;
    select_ln87_fu_314_p3 <= 
        ap_const_lv32_1 when (strm_in_TUSER_int_regslice(0) = '1') else 
        add_ln87_fu_308_p2;

    strm_in_TDATA_blk_n_assign_proc : process(tmp_nbreadreq_fu_180_p9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, strm_in_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TDATA_blk_n <= strm_in_TVALID_int_regslice;
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_in_TREADY <= regslice_both_strm_in_V_data_V_U_ack_in;

    strm_in_TREADY_int_regslice_assign_proc : process(tmp_nbreadreq_fu_180_p9, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_180_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            strm_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_347_p4 <= base_addr_3_read_reg_501_pp0_iter2_reg(31 downto 24);
    tmp_2_fu_365_p4 <= base_addr_0_read_reg_516_pp0_iter2_reg(31 downto 24);
    tmp_3_fu_383_p4 <= base_addr_1_read_reg_511_pp0_iter2_reg(31 downto 24);
    tmp_4_fu_401_p4 <= base_addr_2_read_reg_506_pp0_iter2_reg(31 downto 24);
    tmp_nbreadreq_fu_180_p9 <= (0=>(strm_in_TVALID_int_regslice), others=>'-');
    width_fu_272_p1 <= width_img(12 - 1 downto 0);
end behav;
