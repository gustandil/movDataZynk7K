-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cpyData_copro is
generic (
    C_M_AXI_MEMWR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEMWR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEMWR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMWR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMWR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMWR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMWR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMWR_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXI_LITE_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXI_LITE_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMWR_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEMWR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEMWR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_memWR_AWVALID : OUT STD_LOGIC;
    m_axi_memWR_AWREADY : IN STD_LOGIC;
    m_axi_memWR_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ADDR_WIDTH-1 downto 0);
    m_axi_memWR_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ID_WIDTH-1 downto 0);
    m_axi_memWR_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memWR_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memWR_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memWR_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memWR_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memWR_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memWR_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memWR_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memWR_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_AWUSER_WIDTH-1 downto 0);
    m_axi_memWR_WVALID : OUT STD_LOGIC;
    m_axi_memWR_WREADY : IN STD_LOGIC;
    m_axi_memWR_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_DATA_WIDTH-1 downto 0);
    m_axi_memWR_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_DATA_WIDTH/8-1 downto 0);
    m_axi_memWR_WLAST : OUT STD_LOGIC;
    m_axi_memWR_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ID_WIDTH-1 downto 0);
    m_axi_memWR_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_WUSER_WIDTH-1 downto 0);
    m_axi_memWR_ARVALID : OUT STD_LOGIC;
    m_axi_memWR_ARREADY : IN STD_LOGIC;
    m_axi_memWR_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ADDR_WIDTH-1 downto 0);
    m_axi_memWR_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ID_WIDTH-1 downto 0);
    m_axi_memWR_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memWR_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memWR_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memWR_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memWR_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memWR_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memWR_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memWR_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memWR_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ARUSER_WIDTH-1 downto 0);
    m_axi_memWR_RVALID : IN STD_LOGIC;
    m_axi_memWR_RREADY : OUT STD_LOGIC;
    m_axi_memWR_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEMWR_DATA_WIDTH-1 downto 0);
    m_axi_memWR_RLAST : IN STD_LOGIC;
    m_axi_memWR_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ID_WIDTH-1 downto 0);
    m_axi_memWR_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMWR_RUSER_WIDTH-1 downto 0);
    m_axi_memWR_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memWR_BVALID : IN STD_LOGIC;
    m_axi_memWR_BREADY : OUT STD_LOGIC;
    m_axi_memWR_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memWR_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMWR_ID_WIDTH-1 downto 0);
    m_axi_memWR_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMWR_BUSER_WIDTH-1 downto 0);
    strm_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    strm_in_TVALID : IN STD_LOGIC;
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_Axi_lite_AWVALID : IN STD_LOGIC;
    s_axi_Axi_lite_AWREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_ADDR_WIDTH-1 downto 0);
    s_axi_Axi_lite_WVALID : IN STD_LOGIC;
    s_axi_Axi_lite_WREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH-1 downto 0);
    s_axi_Axi_lite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH/8-1 downto 0);
    s_axi_Axi_lite_ARVALID : IN STD_LOGIC;
    s_axi_Axi_lite_ARREADY : OUT STD_LOGIC;
    s_axi_Axi_lite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_ADDR_WIDTH-1 downto 0);
    s_axi_Axi_lite_RVALID : OUT STD_LOGIC;
    s_axi_Axi_lite_RREADY : IN STD_LOGIC;
    s_axi_Axi_lite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_DATA_WIDTH-1 downto 0);
    s_axi_Axi_lite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Axi_lite_BVALID : OUT STD_LOGIC;
    s_axi_Axi_lite_BREADY : IN STD_LOGIC;
    s_axi_Axi_lite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of cpyData_copro is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cpyData_copro_cpyData_copro,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.380000,HLS_SYN_LAT=11,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2266,HLS_SYN_LUT=1762,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal memW : STD_LOGIC_VECTOR (63 downto 0);
    signal width_img : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_count : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_count_ap_vld : STD_LOGIC;
    signal cols_count : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_count_ap_vld : STD_LOGIC;
    signal maxcol_cnt : STD_LOGIC_VECTOR (31 downto 0);
    signal maxcol_cnt_ap_vld : STD_LOGIC;
    signal statistics_ap_vld : STD_LOGIC;
    signal rows_counter : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal columns_counter : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal max_col_counter : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal numWrites : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal next_reset : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal tmp_nbreadreq_fu_156_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal memWR_AWVALID : STD_LOGIC;
    signal memWR_AWREADY : STD_LOGIC;
    signal memWR_WVALID : STD_LOGIC;
    signal memWR_WREADY : STD_LOGIC;
    signal memWR_ARREADY : STD_LOGIC;
    signal memWR_RVALID : STD_LOGIC;
    signal memWR_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memWR_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal memWR_BVALID : STD_LOGIC;
    signal memWR_BREADY : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal tmp_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_529_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal tmp_reg_529_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal tmp_reg_529_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal memWR_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal memWR_blk_n_W : STD_LOGIC;
    signal memWR_blk_n_B : STD_LOGIC;
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal memW_read_reg_524 : STD_LOGIC_VECTOR (63 downto 0);
    signal memW_read_reg_524_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal memW_read_reg_524_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal memW_read_reg_524_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_529_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_529_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_529_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_529_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_529_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_529_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_529_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_user_fu_306_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_user_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_user_reg_533_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_user_reg_533_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_user_reg_533_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_user_reg_533_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal next_reset_load_load_fu_314_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_reset_load_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_reset_load_reg_540_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal next_reset_load_reg_540_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal next_reset_load_reg_540_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal next_reset_load_reg_540_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_wr_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_wr_reg_544_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_wr_reg_544_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_wr_reg_544_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_wr_reg_544_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_wr_reg_544_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_549 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_reg_549_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_516_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln86_reg_569 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal rows_counter_load_reg_574 : STD_LOGIC_VECTOR (10 downto 0);
    signal max_col_counter_load_reg_584 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln71_fu_387_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln71_reg_590 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln67_fu_411_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln67_reg_598 : STD_LOGIC_VECTOR (10 downto 0);
    signal memWR_addr_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_max_col_counter_loc_0_reg_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter1_max_col_counter_loc_0_reg_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter2_max_col_counter_loc_0_reg_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter3_max_col_counter_loc_0_reg_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter4_max_col_counter_loc_0_reg_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln66_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_numWrites_loc_0_phi_fu_252_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_numWrites_loc_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_numWrites_loc_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_numWrites_loc_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_numWrites_loc_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_numWrites_loc_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_rows_counter_loc_0_reg_261 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter2_rows_counter_loc_0_reg_261 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter3_rows_counter_loc_0_reg_261 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter4_rows_counter_loc_0_reg_261 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter5_rows_counter_loc_0_reg_261 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_max_col_counter_loc_1_reg_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter2_max_col_counter_loc_1_reg_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter3_max_col_counter_loc_1_reg_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter4_max_col_counter_loc_1_reg_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter5_max_col_counter_loc_1_reg_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_22_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_22_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_22_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_22_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_22_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_22_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_22_reg_288 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln91_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal input_data_last_fu_310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_fu_360_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_447_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln91_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln91_fu_458_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_463_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_516_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_516_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal strm_in_TVALID_int_regslice : STD_LOGIC;
    signal strm_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_strm_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_strm_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_user_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_id_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_dest_V_U_ack_in : STD_LOGIC;
    signal grp_fu_516_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_516_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_516_p20 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_condition_425 : BOOLEAN;
    signal ap_condition_439 : BOOLEAN;
    signal ap_condition_443 : BOOLEAN;
    signal ap_condition_459 : BOOLEAN;
    signal ap_condition_462 : BOOLEAN;
    signal ap_condition_754 : BOOLEAN;
    signal ap_condition_767 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cpyData_copro_mac_muladd_12ns_11ns_11ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component cpyData_copro_Axi_lite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width_img : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_count : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_count_ap_vld : IN STD_LOGIC;
        cols_count : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_count_ap_vld : IN STD_LOGIC;
        maxcol_cnt : IN STD_LOGIC_VECTOR (31 downto 0);
        maxcol_cnt_ap_vld : IN STD_LOGIC;
        statistics : IN STD_LOGIC_VECTOR (31 downto 0);
        statistics_ap_vld : IN STD_LOGIC );
    end component;


    component cpyData_copro_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        memW : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cpyData_copro_memWR_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component cpyData_copro_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    Axi_lite_s_axi_U : component cpyData_copro_Axi_lite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_LITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_LITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Axi_lite_AWVALID,
        AWREADY => s_axi_Axi_lite_AWREADY,
        AWADDR => s_axi_Axi_lite_AWADDR,
        WVALID => s_axi_Axi_lite_WVALID,
        WREADY => s_axi_Axi_lite_WREADY,
        WDATA => s_axi_Axi_lite_WDATA,
        WSTRB => s_axi_Axi_lite_WSTRB,
        ARVALID => s_axi_Axi_lite_ARVALID,
        ARREADY => s_axi_Axi_lite_ARREADY,
        ARADDR => s_axi_Axi_lite_ARADDR,
        RVALID => s_axi_Axi_lite_RVALID,
        RREADY => s_axi_Axi_lite_RREADY,
        RDATA => s_axi_Axi_lite_RDATA,
        RRESP => s_axi_Axi_lite_RRESP,
        BVALID => s_axi_Axi_lite_BVALID,
        BREADY => s_axi_Axi_lite_BREADY,
        BRESP => s_axi_Axi_lite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width_img => width_img,
        rows_count => rows_count,
        rows_count_ap_vld => rows_count_ap_vld,
        cols_count => cols_count,
        cols_count_ap_vld => cols_count_ap_vld,
        maxcol_cnt => maxcol_cnt,
        maxcol_cnt_ap_vld => maxcol_cnt_ap_vld,
        statistics => add_ln79_reg_609,
        statistics_ap_vld => statistics_ap_vld);

    control_s_axi_U : component cpyData_copro_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        memW => memW);

    memWR_m_axi_U : component cpyData_copro_memWR_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEMWR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEMWR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEMWR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEMWR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEMWR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEMWR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEMWR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEMWR_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MEMWR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEMWR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEMWR_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_memWR_AWVALID,
        AWREADY => m_axi_memWR_AWREADY,
        AWADDR => m_axi_memWR_AWADDR,
        AWID => m_axi_memWR_AWID,
        AWLEN => m_axi_memWR_AWLEN,
        AWSIZE => m_axi_memWR_AWSIZE,
        AWBURST => m_axi_memWR_AWBURST,
        AWLOCK => m_axi_memWR_AWLOCK,
        AWCACHE => m_axi_memWR_AWCACHE,
        AWPROT => m_axi_memWR_AWPROT,
        AWQOS => m_axi_memWR_AWQOS,
        AWREGION => m_axi_memWR_AWREGION,
        AWUSER => m_axi_memWR_AWUSER,
        WVALID => m_axi_memWR_WVALID,
        WREADY => m_axi_memWR_WREADY,
        WDATA => m_axi_memWR_WDATA,
        WSTRB => m_axi_memWR_WSTRB,
        WLAST => m_axi_memWR_WLAST,
        WID => m_axi_memWR_WID,
        WUSER => m_axi_memWR_WUSER,
        ARVALID => m_axi_memWR_ARVALID,
        ARREADY => m_axi_memWR_ARREADY,
        ARADDR => m_axi_memWR_ARADDR,
        ARID => m_axi_memWR_ARID,
        ARLEN => m_axi_memWR_ARLEN,
        ARSIZE => m_axi_memWR_ARSIZE,
        ARBURST => m_axi_memWR_ARBURST,
        ARLOCK => m_axi_memWR_ARLOCK,
        ARCACHE => m_axi_memWR_ARCACHE,
        ARPROT => m_axi_memWR_ARPROT,
        ARQOS => m_axi_memWR_ARQOS,
        ARREGION => m_axi_memWR_ARREGION,
        ARUSER => m_axi_memWR_ARUSER,
        RVALID => m_axi_memWR_RVALID,
        RREADY => m_axi_memWR_RREADY,
        RDATA => m_axi_memWR_RDATA,
        RLAST => m_axi_memWR_RLAST,
        RID => m_axi_memWR_RID,
        RUSER => m_axi_memWR_RUSER,
        RRESP => m_axi_memWR_RRESP,
        BVALID => m_axi_memWR_BVALID,
        BREADY => m_axi_memWR_BREADY,
        BRESP => m_axi_memWR_BRESP,
        BID => m_axi_memWR_BID,
        BUSER => m_axi_memWR_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => memWR_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => memWR_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => memWR_RDATA,
        I_RFIFONUM => memWR_RFIFONUM,
        I_AWVALID => memWR_AWVALID,
        I_AWREADY => memWR_AWREADY,
        I_AWADDR => memWR_addr_reg_603,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => memWR_WVALID,
        I_WREADY => memWR_WREADY,
        I_WDATA => data_wr_reg_544_pp0_iter5_reg,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => memWR_BVALID,
        I_BREADY => memWR_BREADY);

    mac_muladd_12ns_11ns_11ns_23_4_1_U1 : component cpyData_copro_mac_muladd_12ns_11ns_11ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_516_p0,
        din1 => grp_fu_516_p1,
        din2 => grp_fu_516_p2,
        ce => grp_fu_516_ce,
        dout => grp_fu_516_p3);

    regslice_both_strm_in_V_data_V_U : component cpyData_copro_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TDATA,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_data_V_U_ack_in,
        data_out => strm_in_TDATA_int_regslice,
        vld_out => strm_in_TVALID_int_regslice,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_data_V_U_apdone_blk);

    regslice_both_strm_in_V_keep_V_U : component cpyData_copro_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TKEEP,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_keep_V_U_ack_in,
        data_out => strm_in_TKEEP_int_regslice,
        vld_out => regslice_both_strm_in_V_keep_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_keep_V_U_apdone_blk);

    regslice_both_strm_in_V_strb_V_U : component cpyData_copro_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TSTRB,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_strb_V_U_ack_in,
        data_out => strm_in_TSTRB_int_regslice,
        vld_out => regslice_both_strm_in_V_strb_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_strb_V_U_apdone_blk);

    regslice_both_strm_in_V_user_V_U : component cpyData_copro_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TUSER,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_user_V_U_ack_in,
        data_out => strm_in_TUSER_int_regslice,
        vld_out => regslice_both_strm_in_V_user_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_user_V_U_apdone_blk);

    regslice_both_strm_in_V_last_V_U : component cpyData_copro_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TLAST,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_last_V_U_ack_in,
        data_out => strm_in_TLAST_int_regslice,
        vld_out => regslice_both_strm_in_V_last_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_last_V_U_apdone_blk);

    regslice_both_strm_in_V_id_V_U : component cpyData_copro_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TID,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_id_V_U_ack_in,
        data_out => strm_in_TID_int_regslice,
        vld_out => regslice_both_strm_in_V_id_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_id_V_U_apdone_blk);

    regslice_both_strm_in_V_dest_V_U : component cpyData_copro_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TDEST,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_dest_V_U_ack_in,
        data_out => strm_in_TDEST_int_regslice,
        vld_out => regslice_both_strm_in_V_dest_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_22_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_425)) then
                if (((tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (input_data_user_fu_306_p1 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_empty_22_reg_288 <= ap_const_lv12_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_22_reg_288 <= ap_phi_reg_pp0_iter0_empty_22_reg_288;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_425)) then
                if (((tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (input_data_user_fu_306_p1 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274 <= ap_const_lv12_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter0_max_col_counter_loc_1_reg_274;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_425)) then
                if (((tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (input_data_user_fu_306_p1 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter0_numWrites_loc_0_reg_248;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_425)) then
                if (((tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (input_data_user_fu_306_p1 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261 <= ap_const_lv11_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter0_rows_counter_loc_0_reg_261;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_443)) then 
                    ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238 <= max_col_counter;
                elsif ((ap_const_boolean_1 = ap_condition_439)) then 
                    ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238 <= columns_counter;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter4_max_col_counter_loc_0_reg_238;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter6_empty_22_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_462)) then 
                    ap_phi_reg_pp0_iter6_empty_22_reg_288 <= add_ln71_reg_590;
                elsif ((ap_const_boolean_1 = ap_condition_459)) then 
                    ap_phi_reg_pp0_iter6_empty_22_reg_288 <= ap_const_lv12_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter6_empty_22_reg_288 <= ap_phi_reg_pp0_iter5_empty_22_reg_288;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_462)) then 
                    ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274 <= max_col_counter_load_reg_584;
                elsif ((ap_const_boolean_1 = ap_condition_459)) then 
                    ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter5_max_col_counter_loc_1_reg_274;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_462)) then 
                    ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261 <= rows_counter_load_reg_574;
                elsif ((ap_const_boolean_1 = ap_condition_459)) then 
                    ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261 <= add_ln67_reg_598;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter5_rows_counter_loc_0_reg_261;
                end if;
            end if; 
        end if;
    end process;

    columns_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_1) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                columns_counter <= ap_const_lv12_0;
            elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_0) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                columns_counter <= add_ln71_fu_387_p2;
            end if; 
        end if;
    end process;

    max_col_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_767)) then
                if ((input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_1)) then 
                    max_col_counter <= ap_const_lv12_0;
                elsif ((ap_const_boolean_1 = ap_condition_754)) then 
                    max_col_counter <= columns_counter;
                end if;
            end if; 
        end if;
    end process;

    next_reset_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (next_reset_load_load_fu_314_p1 = ap_const_lv1_1) and (input_data_user_fu_306_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (input_data_user_fu_306_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                next_reset <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (input_data_last_fu_310_p1 = ap_const_lv1_1) and (next_reset_load_load_fu_314_p1 = ap_const_lv1_0) and (input_data_user_fu_306_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                next_reset <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    rows_counter_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_767)) then
                if ((input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_1)) then 
                    rows_counter <= ap_const_lv11_0;
                elsif (((next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0))) then 
                    rows_counter <= add_ln67_fu_411_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln67_reg_598 <= add_ln67_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_0) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln71_reg_590 <= add_ln71_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1))) then
                add_ln79_reg_609 <= add_ln79_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_reg_529_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln86_reg_569 <= grp_fu_516_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter0_max_col_counter_loc_0_reg_238;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_empty_22_reg_288 <= ap_phi_reg_pp0_iter1_empty_22_reg_288;
                ap_phi_reg_pp0_iter2_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter1_max_col_counter_loc_0_reg_238;
                ap_phi_reg_pp0_iter2_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274;
                ap_phi_reg_pp0_iter2_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248;
                ap_phi_reg_pp0_iter2_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_empty_22_reg_288 <= ap_phi_reg_pp0_iter2_empty_22_reg_288;
                ap_phi_reg_pp0_iter3_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter2_max_col_counter_loc_0_reg_238;
                ap_phi_reg_pp0_iter3_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter2_max_col_counter_loc_1_reg_274;
                ap_phi_reg_pp0_iter3_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter2_numWrites_loc_0_reg_248;
                ap_phi_reg_pp0_iter3_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter2_rows_counter_loc_0_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_empty_22_reg_288 <= ap_phi_reg_pp0_iter3_empty_22_reg_288;
                ap_phi_reg_pp0_iter4_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter3_max_col_counter_loc_0_reg_238;
                ap_phi_reg_pp0_iter4_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter3_max_col_counter_loc_1_reg_274;
                ap_phi_reg_pp0_iter4_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter3_numWrites_loc_0_reg_248;
                ap_phi_reg_pp0_iter4_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter3_rows_counter_loc_0_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_empty_22_reg_288 <= ap_phi_reg_pp0_iter4_empty_22_reg_288;
                ap_phi_reg_pp0_iter5_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter4_max_col_counter_loc_1_reg_274;
                ap_phi_reg_pp0_iter5_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter4_numWrites_loc_0_reg_248;
                ap_phi_reg_pp0_iter5_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter4_rows_counter_loc_0_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                col_reg_549 <= strm_in_TDATA_int_regslice(26 downto 16);
                data_wr_reg_544 <= strm_in_TDATA_int_regslice(63 downto 32);
                input_data_user_reg_533 <= strm_in_TUSER_int_regslice;
                next_reset_load_reg_540 <= next_reset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                col_reg_549_pp0_iter1_reg <= col_reg_549;
                data_wr_reg_544_pp0_iter1_reg <= data_wr_reg_544;
                input_data_user_reg_533_pp0_iter1_reg <= input_data_user_reg_533;
                memW_read_reg_524 <= memW;
                memW_read_reg_524_pp0_iter1_reg <= memW_read_reg_524;
                next_reset_load_reg_540_pp0_iter1_reg <= next_reset_load_reg_540;
                tmp_reg_529 <= tmp_nbreadreq_fu_156_p9;
                tmp_reg_529_pp0_iter1_reg <= tmp_reg_529;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                data_wr_reg_544_pp0_iter2_reg <= data_wr_reg_544_pp0_iter1_reg;
                data_wr_reg_544_pp0_iter3_reg <= data_wr_reg_544_pp0_iter2_reg;
                data_wr_reg_544_pp0_iter4_reg <= data_wr_reg_544_pp0_iter3_reg;
                data_wr_reg_544_pp0_iter5_reg <= data_wr_reg_544_pp0_iter4_reg;
                input_data_user_reg_533_pp0_iter2_reg <= input_data_user_reg_533_pp0_iter1_reg;
                input_data_user_reg_533_pp0_iter3_reg <= input_data_user_reg_533_pp0_iter2_reg;
                input_data_user_reg_533_pp0_iter4_reg <= input_data_user_reg_533_pp0_iter3_reg;
                memW_read_reg_524_pp0_iter2_reg <= memW_read_reg_524_pp0_iter1_reg;
                memW_read_reg_524_pp0_iter3_reg <= memW_read_reg_524_pp0_iter2_reg;
                next_reset_load_reg_540_pp0_iter2_reg <= next_reset_load_reg_540_pp0_iter1_reg;
                next_reset_load_reg_540_pp0_iter3_reg <= next_reset_load_reg_540_pp0_iter2_reg;
                next_reset_load_reg_540_pp0_iter4_reg <= next_reset_load_reg_540_pp0_iter3_reg;
                tmp_reg_529_pp0_iter10_reg <= tmp_reg_529_pp0_iter9_reg;
                tmp_reg_529_pp0_iter2_reg <= tmp_reg_529_pp0_iter1_reg;
                tmp_reg_529_pp0_iter3_reg <= tmp_reg_529_pp0_iter2_reg;
                tmp_reg_529_pp0_iter4_reg <= tmp_reg_529_pp0_iter3_reg;
                tmp_reg_529_pp0_iter5_reg <= tmp_reg_529_pp0_iter4_reg;
                tmp_reg_529_pp0_iter6_reg <= tmp_reg_529_pp0_iter5_reg;
                tmp_reg_529_pp0_iter7_reg <= tmp_reg_529_pp0_iter6_reg;
                tmp_reg_529_pp0_iter8_reg <= tmp_reg_529_pp0_iter7_reg;
                tmp_reg_529_pp0_iter9_reg <= tmp_reg_529_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                max_col_counter_load_reg_584 <= max_col_counter;
                memWR_addr_reg_603 <= sext_ln91_fu_473_p1;
                rows_counter_load_reg_574 <= rows_counter;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1))) then
                numWrites <= add_ln79_fu_489_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln67_fu_411_p2 <= std_logic_vector(unsigned(rows_counter) + unsigned(ap_const_lv11_1));
    add_ln71_fu_387_p2 <= std_logic_vector(unsigned(columns_counter) + unsigned(ap_const_lv12_1));
    add_ln79_fu_489_p2 <= std_logic_vector(unsigned(ap_phi_mux_numWrites_loc_0_phi_fu_252_p6) + unsigned(ap_const_lv32_1));
    add_ln91_fu_458_p2 <= std_logic_vector(unsigned(zext_ln91_fu_454_p1) + unsigned(memW_read_reg_524_pp0_iter3_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(tmp_nbreadreq_fu_156_p9, memWR_BVALID, tmp_reg_529_pp0_iter10_reg, ap_enable_reg_pp0_iter11, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (tmp_reg_529_pp0_iter10_reg = ap_const_lv1_1) and (memWR_BVALID = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter6, tmp_nbreadreq_fu_156_p9, memWR_BVALID, ap_block_state6_io, ap_enable_reg_pp0_iter5, ap_block_state7_io, tmp_reg_529_pp0_iter10_reg, ap_enable_reg_pp0_iter11, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (tmp_reg_529_pp0_iter10_reg = ap_const_lv1_1) and (memWR_BVALID = ap_const_logic_0)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, tmp_nbreadreq_fu_156_p9, memWR_BVALID, ap_block_state6_io, ap_enable_reg_pp0_iter5, ap_block_state7_io, tmp_reg_529_pp0_iter10_reg, ap_enable_reg_pp0_iter11, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (tmp_reg_529_pp0_iter10_reg = ap_const_lv1_1) and (memWR_BVALID = ap_const_logic_0)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(memWR_BVALID, tmp_reg_529_pp0_iter10_reg)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((tmp_reg_529_pp0_iter10_reg = ap_const_lv1_1) and (memWR_BVALID = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(tmp_nbreadreq_fu_156_p9, strm_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(memWR_AWREADY, tmp_reg_529_pp0_iter4_reg)
    begin
                ap_block_state6_io <= ((tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1) and (memWR_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(memWR_WREADY, tmp_reg_529_pp0_iter5_reg)
    begin
                ap_block_state7_io <= ((tmp_reg_529_pp0_iter5_reg = ap_const_lv1_1) and (memWR_WREADY = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_425_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
                ap_condition_425 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_439_assign_proc : process(tmp_reg_529_pp0_iter3_reg, input_data_user_reg_533_pp0_iter3_reg, next_reset_load_reg_540_pp0_iter3_reg, icmp_ln66_fu_399_p2)
    begin
                ap_condition_439 <= ((icmp_ln66_fu_399_p2 = ap_const_lv1_1) and (next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1));
    end process;


    ap_condition_443_assign_proc : process(tmp_reg_529_pp0_iter3_reg, input_data_user_reg_533_pp0_iter3_reg, next_reset_load_reg_540_pp0_iter3_reg, icmp_ln66_fu_399_p2)
    begin
                ap_condition_443 <= ((icmp_ln66_fu_399_p2 = ap_const_lv1_0) and (next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1));
    end process;


    ap_condition_459_assign_proc : process(tmp_reg_529_pp0_iter4_reg, input_data_user_reg_533_pp0_iter4_reg, next_reset_load_reg_540_pp0_iter4_reg)
    begin
                ap_condition_459 <= ((next_reset_load_reg_540_pp0_iter4_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter4_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_condition_462_assign_proc : process(tmp_reg_529_pp0_iter4_reg, input_data_user_reg_533_pp0_iter4_reg, next_reset_load_reg_540_pp0_iter4_reg)
    begin
                ap_condition_462 <= ((next_reset_load_reg_540_pp0_iter4_reg = ap_const_lv1_0) and (input_data_user_reg_533_pp0_iter4_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_condition_754_assign_proc : process(input_data_user_reg_533_pp0_iter3_reg, next_reset_load_reg_540_pp0_iter3_reg, icmp_ln66_fu_399_p2)
    begin
                ap_condition_754 <= ((icmp_ln66_fu_399_p2 = ap_const_lv1_1) and (next_reset_load_reg_540_pp0_iter3_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_767_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_529_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
                ap_condition_767 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_529_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_numWrites_loc_0_phi_fu_252_p6_assign_proc : process(numWrites, tmp_reg_529_pp0_iter4_reg, input_data_user_reg_533_pp0_iter4_reg, next_reset_load_reg_540_pp0_iter4_reg, ap_phi_reg_pp0_iter5_numWrites_loc_0_reg_248)
    begin
        if ((((next_reset_load_reg_540_pp0_iter4_reg = ap_const_lv1_0) and (input_data_user_reg_533_pp0_iter4_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1)) or ((next_reset_load_reg_540_pp0_iter4_reg = ap_const_lv1_1) and (input_data_user_reg_533_pp0_iter4_reg = ap_const_lv1_0) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1)))) then 
            ap_phi_mux_numWrites_loc_0_phi_fu_252_p6 <= numWrites;
        else 
            ap_phi_mux_numWrites_loc_0_phi_fu_252_p6 <= ap_phi_reg_pp0_iter5_numWrites_loc_0_reg_248;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_22_reg_288 <= "XXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_max_col_counter_loc_0_reg_238 <= "XXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_max_col_counter_loc_1_reg_274 <= "XXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_numWrites_loc_0_reg_248 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_rows_counter_loc_0_reg_261 <= "XXXXXXXXXXX";
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cols_count <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter6_empty_22_reg_288),32));

    cols_count_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, tmp_reg_529_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_529_pp0_iter5_reg = ap_const_lv1_1))) then 
            cols_count_ap_vld <= ap_const_logic_1;
        else 
            cols_count_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_516_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_516_ce <= ap_const_logic_1;
        else 
            grp_fu_516_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_516_p0 <= grp_fu_516_p00(12 - 1 downto 0);
    grp_fu_516_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_fu_360_p1),23));
    grp_fu_516_p1 <= grp_fu_516_p10(11 - 1 downto 0);
    grp_fu_516_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_fu_346_p1),23));
    grp_fu_516_p2 <= grp_fu_516_p20(11 - 1 downto 0);
    grp_fu_516_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_549_pp0_iter1_reg),23));
    icmp_ln66_fu_399_p2 <= "1" when (unsigned(max_col_counter) < unsigned(columns_counter)) else "0";
    input_data_last_fu_310_p1 <= strm_in_TLAST_int_regslice;
    input_data_user_fu_306_p1 <= strm_in_TUSER_int_regslice;
    maxcol_cnt <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274),32));

    maxcol_cnt_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, tmp_reg_529_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_529_pp0_iter5_reg = ap_const_lv1_1))) then 
            maxcol_cnt_ap_vld <= ap_const_logic_1;
        else 
            maxcol_cnt_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    memWR_AWVALID_assign_proc : process(tmp_reg_529_pp0_iter4_reg, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1))) then 
            memWR_AWVALID <= ap_const_logic_1;
        else 
            memWR_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    memWR_BREADY_assign_proc : process(tmp_reg_529_pp0_iter10_reg, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (tmp_reg_529_pp0_iter10_reg = ap_const_lv1_1))) then 
            memWR_BREADY <= ap_const_logic_1;
        else 
            memWR_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    memWR_WVALID_assign_proc : process(ap_enable_reg_pp0_iter6, tmp_reg_529_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_529_pp0_iter5_reg = ap_const_lv1_1))) then 
            memWR_WVALID <= ap_const_logic_1;
        else 
            memWR_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    memWR_blk_n_AW_assign_proc : process(m_axi_memWR_AWREADY, tmp_reg_529_pp0_iter4_reg, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (tmp_reg_529_pp0_iter4_reg = ap_const_lv1_1))) then 
            memWR_blk_n_AW <= m_axi_memWR_AWREADY;
        else 
            memWR_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    memWR_blk_n_B_assign_proc : process(m_axi_memWR_BVALID, tmp_reg_529_pp0_iter10_reg, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (tmp_reg_529_pp0_iter10_reg = ap_const_lv1_1))) then 
            memWR_blk_n_B <= m_axi_memWR_BVALID;
        else 
            memWR_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    memWR_blk_n_W_assign_proc : process(m_axi_memWR_WREADY, ap_enable_reg_pp0_iter6, tmp_reg_529_pp0_iter5_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_529_pp0_iter5_reg = ap_const_lv1_1))) then 
            memWR_blk_n_W <= m_axi_memWR_WREADY;
        else 
            memWR_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    next_reset_load_load_fu_314_p1 <= next_reset;
    row_fu_346_p1 <= strm_in_TDATA_int_regslice(11 - 1 downto 0);
    rows_count <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261),32));

    rows_count_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, tmp_reg_529_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_529_pp0_iter5_reg = ap_const_lv1_1))) then 
            rows_count_ap_vld <= ap_const_logic_1;
        else 
            rows_count_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln91_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_463_p4),64));

    shl_ln_fu_447_p3 <= (add_ln86_reg_569 & ap_const_lv2_0);

    statistics_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, tmp_reg_529_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_529_pp0_iter5_reg = ap_const_lv1_1))) then 
            statistics_ap_vld <= ap_const_logic_1;
        else 
            statistics_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_TDATA_blk_n_assign_proc : process(tmp_nbreadreq_fu_156_p9, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, strm_in_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            strm_in_TDATA_blk_n <= strm_in_TVALID_int_regslice;
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_in_TREADY <= regslice_both_strm_in_V_data_V_U_ack_in;

    strm_in_TREADY_int_regslice_assign_proc : process(tmp_nbreadreq_fu_156_p9, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (tmp_nbreadreq_fu_156_p9 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            strm_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            strm_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_156_p9 <= (0=>(strm_in_TVALID_int_regslice), others=>'-');
    trunc_ln_fu_463_p4 <= add_ln91_fu_458_p2(63 downto 2);
    width_fu_360_p1 <= width_img(12 - 1 downto 0);
    zext_ln91_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_447_p3),64));
end behav;
