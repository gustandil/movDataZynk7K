// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cpyData_copro_cpyData_copro,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.380000,HLS_SYN_LAT=11,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2266,HLS_SYN_LUT=1762,HLS_VERSION=2023_1}" *)

module cpyData_copro (
        ap_clk,
        ap_rst_n,
        m_axi_memWR_AWVALID,
        m_axi_memWR_AWREADY,
        m_axi_memWR_AWADDR,
        m_axi_memWR_AWID,
        m_axi_memWR_AWLEN,
        m_axi_memWR_AWSIZE,
        m_axi_memWR_AWBURST,
        m_axi_memWR_AWLOCK,
        m_axi_memWR_AWCACHE,
        m_axi_memWR_AWPROT,
        m_axi_memWR_AWQOS,
        m_axi_memWR_AWREGION,
        m_axi_memWR_AWUSER,
        m_axi_memWR_WVALID,
        m_axi_memWR_WREADY,
        m_axi_memWR_WDATA,
        m_axi_memWR_WSTRB,
        m_axi_memWR_WLAST,
        m_axi_memWR_WID,
        m_axi_memWR_WUSER,
        m_axi_memWR_ARVALID,
        m_axi_memWR_ARREADY,
        m_axi_memWR_ARADDR,
        m_axi_memWR_ARID,
        m_axi_memWR_ARLEN,
        m_axi_memWR_ARSIZE,
        m_axi_memWR_ARBURST,
        m_axi_memWR_ARLOCK,
        m_axi_memWR_ARCACHE,
        m_axi_memWR_ARPROT,
        m_axi_memWR_ARQOS,
        m_axi_memWR_ARREGION,
        m_axi_memWR_ARUSER,
        m_axi_memWR_RVALID,
        m_axi_memWR_RREADY,
        m_axi_memWR_RDATA,
        m_axi_memWR_RLAST,
        m_axi_memWR_RID,
        m_axi_memWR_RUSER,
        m_axi_memWR_RRESP,
        m_axi_memWR_BVALID,
        m_axi_memWR_BREADY,
        m_axi_memWR_BRESP,
        m_axi_memWR_BID,
        m_axi_memWR_BUSER,
        strm_in_TDATA,
        strm_in_TVALID,
        strm_in_TREADY,
        strm_in_TKEEP,
        strm_in_TSTRB,
        strm_in_TUSER,
        strm_in_TLAST,
        strm_in_TID,
        strm_in_TDEST,
        s_axi_Axi_lite_AWVALID,
        s_axi_Axi_lite_AWREADY,
        s_axi_Axi_lite_AWADDR,
        s_axi_Axi_lite_WVALID,
        s_axi_Axi_lite_WREADY,
        s_axi_Axi_lite_WDATA,
        s_axi_Axi_lite_WSTRB,
        s_axi_Axi_lite_ARVALID,
        s_axi_Axi_lite_ARREADY,
        s_axi_Axi_lite_ARADDR,
        s_axi_Axi_lite_RVALID,
        s_axi_Axi_lite_RREADY,
        s_axi_Axi_lite_RDATA,
        s_axi_Axi_lite_RRESP,
        s_axi_Axi_lite_BVALID,
        s_axi_Axi_lite_BREADY,
        s_axi_Axi_lite_BRESP,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXI_LITE_DATA_WIDTH = 32;
parameter    C_S_AXI_AXI_LITE_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_M_AXI_MEMWR_ID_WIDTH = 1;
parameter    C_M_AXI_MEMWR_ADDR_WIDTH = 64;
parameter    C_M_AXI_MEMWR_DATA_WIDTH = 32;
parameter    C_M_AXI_MEMWR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEMWR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEMWR_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEMWR_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEMWR_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEMWR_USER_VALUE = 0;
parameter    C_M_AXI_MEMWR_PROT_VALUE = 0;
parameter    C_M_AXI_MEMWR_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXI_LITE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEMWR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_memWR_AWVALID;
input   m_axi_memWR_AWREADY;
output  [C_M_AXI_MEMWR_ADDR_WIDTH - 1:0] m_axi_memWR_AWADDR;
output  [C_M_AXI_MEMWR_ID_WIDTH - 1:0] m_axi_memWR_AWID;
output  [7:0] m_axi_memWR_AWLEN;
output  [2:0] m_axi_memWR_AWSIZE;
output  [1:0] m_axi_memWR_AWBURST;
output  [1:0] m_axi_memWR_AWLOCK;
output  [3:0] m_axi_memWR_AWCACHE;
output  [2:0] m_axi_memWR_AWPROT;
output  [3:0] m_axi_memWR_AWQOS;
output  [3:0] m_axi_memWR_AWREGION;
output  [C_M_AXI_MEMWR_AWUSER_WIDTH - 1:0] m_axi_memWR_AWUSER;
output   m_axi_memWR_WVALID;
input   m_axi_memWR_WREADY;
output  [C_M_AXI_MEMWR_DATA_WIDTH - 1:0] m_axi_memWR_WDATA;
output  [C_M_AXI_MEMWR_WSTRB_WIDTH - 1:0] m_axi_memWR_WSTRB;
output   m_axi_memWR_WLAST;
output  [C_M_AXI_MEMWR_ID_WIDTH - 1:0] m_axi_memWR_WID;
output  [C_M_AXI_MEMWR_WUSER_WIDTH - 1:0] m_axi_memWR_WUSER;
output   m_axi_memWR_ARVALID;
input   m_axi_memWR_ARREADY;
output  [C_M_AXI_MEMWR_ADDR_WIDTH - 1:0] m_axi_memWR_ARADDR;
output  [C_M_AXI_MEMWR_ID_WIDTH - 1:0] m_axi_memWR_ARID;
output  [7:0] m_axi_memWR_ARLEN;
output  [2:0] m_axi_memWR_ARSIZE;
output  [1:0] m_axi_memWR_ARBURST;
output  [1:0] m_axi_memWR_ARLOCK;
output  [3:0] m_axi_memWR_ARCACHE;
output  [2:0] m_axi_memWR_ARPROT;
output  [3:0] m_axi_memWR_ARQOS;
output  [3:0] m_axi_memWR_ARREGION;
output  [C_M_AXI_MEMWR_ARUSER_WIDTH - 1:0] m_axi_memWR_ARUSER;
input   m_axi_memWR_RVALID;
output   m_axi_memWR_RREADY;
input  [C_M_AXI_MEMWR_DATA_WIDTH - 1:0] m_axi_memWR_RDATA;
input   m_axi_memWR_RLAST;
input  [C_M_AXI_MEMWR_ID_WIDTH - 1:0] m_axi_memWR_RID;
input  [C_M_AXI_MEMWR_RUSER_WIDTH - 1:0] m_axi_memWR_RUSER;
input  [1:0] m_axi_memWR_RRESP;
input   m_axi_memWR_BVALID;
output   m_axi_memWR_BREADY;
input  [1:0] m_axi_memWR_BRESP;
input  [C_M_AXI_MEMWR_ID_WIDTH - 1:0] m_axi_memWR_BID;
input  [C_M_AXI_MEMWR_BUSER_WIDTH - 1:0] m_axi_memWR_BUSER;
input  [63:0] strm_in_TDATA;
input   strm_in_TVALID;
output   strm_in_TREADY;
input  [7:0] strm_in_TKEEP;
input  [7:0] strm_in_TSTRB;
input  [0:0] strm_in_TUSER;
input  [0:0] strm_in_TLAST;
input  [0:0] strm_in_TID;
input  [0:0] strm_in_TDEST;
input   s_axi_Axi_lite_AWVALID;
output   s_axi_Axi_lite_AWREADY;
input  [C_S_AXI_AXI_LITE_ADDR_WIDTH - 1:0] s_axi_Axi_lite_AWADDR;
input   s_axi_Axi_lite_WVALID;
output   s_axi_Axi_lite_WREADY;
input  [C_S_AXI_AXI_LITE_DATA_WIDTH - 1:0] s_axi_Axi_lite_WDATA;
input  [C_S_AXI_AXI_LITE_WSTRB_WIDTH - 1:0] s_axi_Axi_lite_WSTRB;
input   s_axi_Axi_lite_ARVALID;
output   s_axi_Axi_lite_ARREADY;
input  [C_S_AXI_AXI_LITE_ADDR_WIDTH - 1:0] s_axi_Axi_lite_ARADDR;
output   s_axi_Axi_lite_RVALID;
input   s_axi_Axi_lite_RREADY;
output  [C_S_AXI_AXI_LITE_DATA_WIDTH - 1:0] s_axi_Axi_lite_RDATA;
output  [1:0] s_axi_Axi_lite_RRESP;
output   s_axi_Axi_lite_BVALID;
input   s_axi_Axi_lite_BREADY;
output  [1:0] s_axi_Axi_lite_BRESP;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [63:0] memW;
wire   [31:0] width_img;
wire   [31:0] rows_count;
reg    rows_count_ap_vld;
wire   [31:0] cols_count;
reg    cols_count_ap_vld;
wire   [31:0] maxcol_cnt;
reg    maxcol_cnt_ap_vld;
reg    statistics_ap_vld;
reg   [10:0] rows_counter;
reg   [11:0] columns_counter;
reg   [11:0] max_col_counter;
reg   [31:0] numWrites;
reg   [0:0] next_reset;
reg    ap_enable_reg_pp0_iter6;
wire   [0:0] tmp_nbreadreq_fu_156_p9;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    memWR_AWVALID;
wire    memWR_AWREADY;
reg    memWR_WVALID;
wire    memWR_WREADY;
wire    memWR_ARREADY;
wire    memWR_RVALID;
wire   [31:0] memWR_RDATA;
wire   [8:0] memWR_RFIFONUM;
wire    memWR_BVALID;
reg    memWR_BREADY;
wire    ap_block_state6_pp0_stage0_iter5;
reg   [0:0] tmp_reg_529;
reg   [0:0] tmp_reg_529_pp0_iter4_reg;
reg    ap_block_state6_io;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg   [0:0] tmp_reg_529_pp0_iter5_reg;
reg    ap_block_state7_io;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg   [0:0] tmp_reg_529_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_enable_reg_pp0_iter11;
reg    ap_block_pp0_stage0_11001;
reg    memWR_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    memWR_blk_n_W;
reg    memWR_blk_n_B;
reg    strm_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg   [63:0] memW_read_reg_524;
reg   [63:0] memW_read_reg_524_pp0_iter1_reg;
reg   [63:0] memW_read_reg_524_pp0_iter2_reg;
reg   [63:0] memW_read_reg_524_pp0_iter3_reg;
reg   [0:0] tmp_reg_529_pp0_iter1_reg;
reg   [0:0] tmp_reg_529_pp0_iter2_reg;
reg   [0:0] tmp_reg_529_pp0_iter3_reg;
reg   [0:0] tmp_reg_529_pp0_iter6_reg;
reg   [0:0] tmp_reg_529_pp0_iter7_reg;
reg   [0:0] tmp_reg_529_pp0_iter8_reg;
reg   [0:0] tmp_reg_529_pp0_iter9_reg;
wire   [0:0] input_data_user_fu_306_p1;
reg   [0:0] input_data_user_reg_533;
reg   [0:0] input_data_user_reg_533_pp0_iter1_reg;
reg   [0:0] input_data_user_reg_533_pp0_iter2_reg;
reg   [0:0] input_data_user_reg_533_pp0_iter3_reg;
reg   [0:0] input_data_user_reg_533_pp0_iter4_reg;
wire   [0:0] next_reset_load_load_fu_314_p1;
reg   [0:0] next_reset_load_reg_540;
reg   [0:0] next_reset_load_reg_540_pp0_iter1_reg;
reg   [0:0] next_reset_load_reg_540_pp0_iter2_reg;
reg   [0:0] next_reset_load_reg_540_pp0_iter3_reg;
reg   [0:0] next_reset_load_reg_540_pp0_iter4_reg;
reg   [31:0] data_wr_reg_544;
reg   [31:0] data_wr_reg_544_pp0_iter1_reg;
reg   [31:0] data_wr_reg_544_pp0_iter2_reg;
reg   [31:0] data_wr_reg_544_pp0_iter3_reg;
reg   [31:0] data_wr_reg_544_pp0_iter4_reg;
reg   [31:0] data_wr_reg_544_pp0_iter5_reg;
reg   [10:0] col_reg_549;
reg   [10:0] col_reg_549_pp0_iter1_reg;
wire   [22:0] grp_fu_516_p3;
reg   [22:0] add_ln86_reg_569;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] rows_counter_load_reg_574;
reg   [11:0] max_col_counter_load_reg_584;
wire   [11:0] add_ln71_fu_387_p2;
reg   [11:0] add_ln71_reg_590;
wire   [10:0] add_ln67_fu_411_p2;
reg   [10:0] add_ln67_reg_598;
reg   [63:0] memWR_addr_reg_603;
wire   [31:0] add_ln79_fu_489_p2;
reg   [31:0] add_ln79_reg_609;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
wire   [11:0] ap_phi_reg_pp0_iter0_max_col_counter_loc_0_reg_238;
reg   [11:0] ap_phi_reg_pp0_iter1_max_col_counter_loc_0_reg_238;
reg   [11:0] ap_phi_reg_pp0_iter2_max_col_counter_loc_0_reg_238;
reg   [11:0] ap_phi_reg_pp0_iter3_max_col_counter_loc_0_reg_238;
reg   [11:0] ap_phi_reg_pp0_iter4_max_col_counter_loc_0_reg_238;
reg   [11:0] ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238;
wire   [0:0] icmp_ln66_fu_399_p2;
reg   [31:0] ap_phi_mux_numWrites_loc_0_phi_fu_252_p6;
wire   [31:0] ap_phi_reg_pp0_iter0_numWrites_loc_0_reg_248;
reg   [31:0] ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248;
reg   [31:0] ap_phi_reg_pp0_iter2_numWrites_loc_0_reg_248;
reg   [31:0] ap_phi_reg_pp0_iter3_numWrites_loc_0_reg_248;
reg   [31:0] ap_phi_reg_pp0_iter4_numWrites_loc_0_reg_248;
reg   [31:0] ap_phi_reg_pp0_iter5_numWrites_loc_0_reg_248;
wire   [10:0] ap_phi_reg_pp0_iter0_rows_counter_loc_0_reg_261;
reg   [10:0] ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261;
reg   [10:0] ap_phi_reg_pp0_iter2_rows_counter_loc_0_reg_261;
reg   [10:0] ap_phi_reg_pp0_iter3_rows_counter_loc_0_reg_261;
reg   [10:0] ap_phi_reg_pp0_iter4_rows_counter_loc_0_reg_261;
reg   [10:0] ap_phi_reg_pp0_iter5_rows_counter_loc_0_reg_261;
reg   [10:0] ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261;
wire   [11:0] ap_phi_reg_pp0_iter0_max_col_counter_loc_1_reg_274;
reg   [11:0] ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274;
reg   [11:0] ap_phi_reg_pp0_iter2_max_col_counter_loc_1_reg_274;
reg   [11:0] ap_phi_reg_pp0_iter3_max_col_counter_loc_1_reg_274;
reg   [11:0] ap_phi_reg_pp0_iter4_max_col_counter_loc_1_reg_274;
reg   [11:0] ap_phi_reg_pp0_iter5_max_col_counter_loc_1_reg_274;
reg   [11:0] ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274;
wire   [11:0] ap_phi_reg_pp0_iter0_empty_22_reg_288;
reg   [11:0] ap_phi_reg_pp0_iter1_empty_22_reg_288;
reg   [11:0] ap_phi_reg_pp0_iter2_empty_22_reg_288;
reg   [11:0] ap_phi_reg_pp0_iter3_empty_22_reg_288;
reg   [11:0] ap_phi_reg_pp0_iter4_empty_22_reg_288;
reg   [11:0] ap_phi_reg_pp0_iter5_empty_22_reg_288;
reg   [11:0] ap_phi_reg_pp0_iter6_empty_22_reg_288;
wire  signed [63:0] sext_ln91_fu_473_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] input_data_last_fu_310_p1;
wire   [10:0] row_fu_346_p1;
wire   [11:0] width_fu_360_p1;
wire   [24:0] shl_ln_fu_447_p3;
wire   [63:0] zext_ln91_fu_454_p1;
wire   [63:0] add_ln91_fu_458_p2;
wire   [61:0] trunc_ln_fu_463_p4;
wire   [11:0] grp_fu_516_p0;
wire   [10:0] grp_fu_516_p1;
wire   [10:0] grp_fu_516_p2;
reg    grp_fu_516_ce;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_strm_in_V_data_V_U_apdone_blk;
wire   [63:0] strm_in_TDATA_int_regslice;
wire    strm_in_TVALID_int_regslice;
reg    strm_in_TREADY_int_regslice;
wire    regslice_both_strm_in_V_data_V_U_ack_in;
wire    regslice_both_strm_in_V_keep_V_U_apdone_blk;
wire   [7:0] strm_in_TKEEP_int_regslice;
wire    regslice_both_strm_in_V_keep_V_U_vld_out;
wire    regslice_both_strm_in_V_keep_V_U_ack_in;
wire    regslice_both_strm_in_V_strb_V_U_apdone_blk;
wire   [7:0] strm_in_TSTRB_int_regslice;
wire    regslice_both_strm_in_V_strb_V_U_vld_out;
wire    regslice_both_strm_in_V_strb_V_U_ack_in;
wire    regslice_both_strm_in_V_user_V_U_apdone_blk;
wire   [0:0] strm_in_TUSER_int_regslice;
wire    regslice_both_strm_in_V_user_V_U_vld_out;
wire    regslice_both_strm_in_V_user_V_U_ack_in;
wire    regslice_both_strm_in_V_last_V_U_apdone_blk;
wire   [0:0] strm_in_TLAST_int_regslice;
wire    regslice_both_strm_in_V_last_V_U_vld_out;
wire    regslice_both_strm_in_V_last_V_U_ack_in;
wire    regslice_both_strm_in_V_id_V_U_apdone_blk;
wire   [0:0] strm_in_TID_int_regslice;
wire    regslice_both_strm_in_V_id_V_U_vld_out;
wire    regslice_both_strm_in_V_id_V_U_ack_in;
wire    regslice_both_strm_in_V_dest_V_U_apdone_blk;
wire   [0:0] strm_in_TDEST_int_regslice;
wire    regslice_both_strm_in_V_dest_V_U_vld_out;
wire    regslice_both_strm_in_V_dest_V_U_ack_in;
wire   [22:0] grp_fu_516_p00;
wire   [22:0] grp_fu_516_p10;
wire   [22:0] grp_fu_516_p20;
reg    ap_condition_425;
reg    ap_condition_439;
reg    ap_condition_443;
reg    ap_condition_459;
reg    ap_condition_462;
reg    ap_condition_754;
reg    ap_condition_767;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 rows_counter = 11'd0;
#0 columns_counter = 12'd0;
#0 max_col_counter = 12'd0;
#0 numWrites = 32'd0;
#0 next_reset = 1'd0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

cpyData_copro_Axi_lite_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXI_LITE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXI_LITE_DATA_WIDTH ))
Axi_lite_s_axi_U(
    .AWVALID(s_axi_Axi_lite_AWVALID),
    .AWREADY(s_axi_Axi_lite_AWREADY),
    .AWADDR(s_axi_Axi_lite_AWADDR),
    .WVALID(s_axi_Axi_lite_WVALID),
    .WREADY(s_axi_Axi_lite_WREADY),
    .WDATA(s_axi_Axi_lite_WDATA),
    .WSTRB(s_axi_Axi_lite_WSTRB),
    .ARVALID(s_axi_Axi_lite_ARVALID),
    .ARREADY(s_axi_Axi_lite_ARREADY),
    .ARADDR(s_axi_Axi_lite_ARADDR),
    .RVALID(s_axi_Axi_lite_RVALID),
    .RREADY(s_axi_Axi_lite_RREADY),
    .RDATA(s_axi_Axi_lite_RDATA),
    .RRESP(s_axi_Axi_lite_RRESP),
    .BVALID(s_axi_Axi_lite_BVALID),
    .BREADY(s_axi_Axi_lite_BREADY),
    .BRESP(s_axi_Axi_lite_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .width_img(width_img),
    .rows_count(rows_count),
    .rows_count_ap_vld(rows_count_ap_vld),
    .cols_count(cols_count),
    .cols_count_ap_vld(cols_count_ap_vld),
    .maxcol_cnt(maxcol_cnt),
    .maxcol_cnt_ap_vld(maxcol_cnt_ap_vld),
    .statistics(add_ln79_reg_609),
    .statistics_ap_vld(statistics_ap_vld)
);

cpyData_copro_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .memW(memW)
);

cpyData_copro_memWR_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEMWR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEMWR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEMWR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEMWR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEMWR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEMWR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEMWR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEMWR_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MEMWR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEMWR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEMWR_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
memWR_m_axi_U(
    .AWVALID(m_axi_memWR_AWVALID),
    .AWREADY(m_axi_memWR_AWREADY),
    .AWADDR(m_axi_memWR_AWADDR),
    .AWID(m_axi_memWR_AWID),
    .AWLEN(m_axi_memWR_AWLEN),
    .AWSIZE(m_axi_memWR_AWSIZE),
    .AWBURST(m_axi_memWR_AWBURST),
    .AWLOCK(m_axi_memWR_AWLOCK),
    .AWCACHE(m_axi_memWR_AWCACHE),
    .AWPROT(m_axi_memWR_AWPROT),
    .AWQOS(m_axi_memWR_AWQOS),
    .AWREGION(m_axi_memWR_AWREGION),
    .AWUSER(m_axi_memWR_AWUSER),
    .WVALID(m_axi_memWR_WVALID),
    .WREADY(m_axi_memWR_WREADY),
    .WDATA(m_axi_memWR_WDATA),
    .WSTRB(m_axi_memWR_WSTRB),
    .WLAST(m_axi_memWR_WLAST),
    .WID(m_axi_memWR_WID),
    .WUSER(m_axi_memWR_WUSER),
    .ARVALID(m_axi_memWR_ARVALID),
    .ARREADY(m_axi_memWR_ARREADY),
    .ARADDR(m_axi_memWR_ARADDR),
    .ARID(m_axi_memWR_ARID),
    .ARLEN(m_axi_memWR_ARLEN),
    .ARSIZE(m_axi_memWR_ARSIZE),
    .ARBURST(m_axi_memWR_ARBURST),
    .ARLOCK(m_axi_memWR_ARLOCK),
    .ARCACHE(m_axi_memWR_ARCACHE),
    .ARPROT(m_axi_memWR_ARPROT),
    .ARQOS(m_axi_memWR_ARQOS),
    .ARREGION(m_axi_memWR_ARREGION),
    .ARUSER(m_axi_memWR_ARUSER),
    .RVALID(m_axi_memWR_RVALID),
    .RREADY(m_axi_memWR_RREADY),
    .RDATA(m_axi_memWR_RDATA),
    .RLAST(m_axi_memWR_RLAST),
    .RID(m_axi_memWR_RID),
    .RUSER(m_axi_memWR_RUSER),
    .RRESP(m_axi_memWR_RRESP),
    .BVALID(m_axi_memWR_BVALID),
    .BREADY(m_axi_memWR_BREADY),
    .BRESP(m_axi_memWR_BRESP),
    .BID(m_axi_memWR_BID),
    .BUSER(m_axi_memWR_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(memWR_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(memWR_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(memWR_RDATA),
    .I_RFIFONUM(memWR_RFIFONUM),
    .I_AWVALID(memWR_AWVALID),
    .I_AWREADY(memWR_AWREADY),
    .I_AWADDR(memWR_addr_reg_603),
    .I_AWLEN(32'd1),
    .I_WVALID(memWR_WVALID),
    .I_WREADY(memWR_WREADY),
    .I_WDATA(data_wr_reg_544_pp0_iter5_reg),
    .I_WSTRB(4'd15),
    .I_BVALID(memWR_BVALID),
    .I_BREADY(memWR_BREADY)
);

cpyData_copro_mac_muladd_12ns_11ns_11ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 23 ))
mac_muladd_12ns_11ns_11ns_23_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_516_p0),
    .din1(grp_fu_516_p1),
    .din2(grp_fu_516_p2),
    .ce(grp_fu_516_ce),
    .dout(grp_fu_516_p3)
);

cpyData_copro_regslice_both #(
    .DataWidth( 64 ))
regslice_both_strm_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TDATA),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_data_V_U_ack_in),
    .data_out(strm_in_TDATA_int_regslice),
    .vld_out(strm_in_TVALID_int_regslice),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_data_V_U_apdone_blk)
);

cpyData_copro_regslice_both #(
    .DataWidth( 8 ))
regslice_both_strm_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TKEEP),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_keep_V_U_ack_in),
    .data_out(strm_in_TKEEP_int_regslice),
    .vld_out(regslice_both_strm_in_V_keep_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_keep_V_U_apdone_blk)
);

cpyData_copro_regslice_both #(
    .DataWidth( 8 ))
regslice_both_strm_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TSTRB),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_strb_V_U_ack_in),
    .data_out(strm_in_TSTRB_int_regslice),
    .vld_out(regslice_both_strm_in_V_strb_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_strb_V_U_apdone_blk)
);

cpyData_copro_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TUSER),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_user_V_U_ack_in),
    .data_out(strm_in_TUSER_int_regslice),
    .vld_out(regslice_both_strm_in_V_user_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_user_V_U_apdone_blk)
);

cpyData_copro_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TLAST),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_last_V_U_ack_in),
    .data_out(strm_in_TLAST_int_regslice),
    .vld_out(regslice_both_strm_in_V_last_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_last_V_U_apdone_blk)
);

cpyData_copro_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TID),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_id_V_U_ack_in),
    .data_out(strm_in_TID_int_regslice),
    .vld_out(regslice_both_strm_in_V_id_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_id_V_U_apdone_blk)
);

cpyData_copro_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TDEST),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_dest_V_U_ack_in),
    .data_out(strm_in_TDEST_int_regslice),
    .vld_out(regslice_both_strm_in_V_dest_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_425)) begin
        if (((tmp_nbreadreq_fu_156_p9 == 1'd1) & (input_data_user_fu_306_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_empty_22_reg_288 <= 12'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_22_reg_288 <= ap_phi_reg_pp0_iter0_empty_22_reg_288;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_425)) begin
        if (((tmp_nbreadreq_fu_156_p9 == 1'd1) & (input_data_user_fu_306_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274 <= 12'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter0_max_col_counter_loc_1_reg_274;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_425)) begin
        if (((tmp_nbreadreq_fu_156_p9 == 1'd1) & (input_data_user_fu_306_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter0_numWrites_loc_0_reg_248;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_425)) begin
        if (((tmp_nbreadreq_fu_156_p9 == 1'd1) & (input_data_user_fu_306_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261 <= 11'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter0_rows_counter_loc_0_reg_261;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'b1 == ap_condition_443)) begin
            ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238 <= max_col_counter;
        end else if ((1'b1 == ap_condition_439)) begin
            ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238 <= columns_counter;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter4_max_col_counter_loc_0_reg_238;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        if ((1'b1 == ap_condition_462)) begin
            ap_phi_reg_pp0_iter6_empty_22_reg_288 <= add_ln71_reg_590;
        end else if ((1'b1 == ap_condition_459)) begin
            ap_phi_reg_pp0_iter6_empty_22_reg_288 <= 12'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter6_empty_22_reg_288 <= ap_phi_reg_pp0_iter5_empty_22_reg_288;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        if ((1'b1 == ap_condition_462)) begin
            ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274 <= max_col_counter_load_reg_584;
        end else if ((1'b1 == ap_condition_459)) begin
            ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter5_max_col_counter_loc_0_reg_238;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter5_max_col_counter_loc_1_reg_274;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        if ((1'b1 == ap_condition_462)) begin
            ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261 <= rows_counter_load_reg_574;
        end else if ((1'b1 == ap_condition_459)) begin
            ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261 <= add_ln67_reg_598;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter5_rows_counter_loc_0_reg_261;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (input_data_user_reg_533_pp0_iter3_reg == 1'd1) & (tmp_reg_529_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (next_reset_load_reg_540_pp0_iter3_reg == 1'd1) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0) & (tmp_reg_529_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        columns_counter <= 12'd0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (next_reset_load_reg_540_pp0_iter3_reg == 1'd0) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0) & (tmp_reg_529_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        columns_counter <= add_ln71_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_767)) begin
        if ((input_data_user_reg_533_pp0_iter3_reg == 1'd1)) begin
            max_col_counter <= 12'd0;
        end else if ((1'b1 == ap_condition_754)) begin
            max_col_counter <= columns_counter;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (next_reset_load_load_fu_314_p1 == 1'd1) & (input_data_user_fu_306_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (input_data_user_fu_306_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        next_reset <= 1'd0;
    end else if (((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (input_data_last_fu_310_p1 == 1'd1) & (next_reset_load_load_fu_314_p1 == 1'd0) & (input_data_user_fu_306_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        next_reset <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_767)) begin
        if ((input_data_user_reg_533_pp0_iter3_reg == 1'd1)) begin
            rows_counter <= 11'd0;
        end else if (((next_reset_load_reg_540_pp0_iter3_reg == 1'd1) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0))) begin
            rows_counter <= add_ln67_fu_411_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((next_reset_load_reg_540_pp0_iter3_reg == 1'd1) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0) & (tmp_reg_529_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln67_reg_598 <= add_ln67_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((next_reset_load_reg_540_pp0_iter3_reg == 1'd0) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0) & (tmp_reg_529_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln71_reg_590 <= add_ln71_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_529_pp0_iter4_reg == 1'd1))) begin
        add_ln79_reg_609 <= add_ln79_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_reg_529_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln86_reg_569 <= grp_fu_516_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter0_max_col_counter_loc_0_reg_238;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_empty_22_reg_288 <= ap_phi_reg_pp0_iter1_empty_22_reg_288;
        ap_phi_reg_pp0_iter2_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter1_max_col_counter_loc_0_reg_238;
        ap_phi_reg_pp0_iter2_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter1_max_col_counter_loc_1_reg_274;
        ap_phi_reg_pp0_iter2_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter1_numWrites_loc_0_reg_248;
        ap_phi_reg_pp0_iter2_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter1_rows_counter_loc_0_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_empty_22_reg_288 <= ap_phi_reg_pp0_iter2_empty_22_reg_288;
        ap_phi_reg_pp0_iter3_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter2_max_col_counter_loc_0_reg_238;
        ap_phi_reg_pp0_iter3_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter2_max_col_counter_loc_1_reg_274;
        ap_phi_reg_pp0_iter3_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter2_numWrites_loc_0_reg_248;
        ap_phi_reg_pp0_iter3_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter2_rows_counter_loc_0_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_empty_22_reg_288 <= ap_phi_reg_pp0_iter3_empty_22_reg_288;
        ap_phi_reg_pp0_iter4_max_col_counter_loc_0_reg_238 <= ap_phi_reg_pp0_iter3_max_col_counter_loc_0_reg_238;
        ap_phi_reg_pp0_iter4_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter3_max_col_counter_loc_1_reg_274;
        ap_phi_reg_pp0_iter4_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter3_numWrites_loc_0_reg_248;
        ap_phi_reg_pp0_iter4_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter3_rows_counter_loc_0_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_empty_22_reg_288 <= ap_phi_reg_pp0_iter4_empty_22_reg_288;
        ap_phi_reg_pp0_iter5_max_col_counter_loc_1_reg_274 <= ap_phi_reg_pp0_iter4_max_col_counter_loc_1_reg_274;
        ap_phi_reg_pp0_iter5_numWrites_loc_0_reg_248 <= ap_phi_reg_pp0_iter4_numWrites_loc_0_reg_248;
        ap_phi_reg_pp0_iter5_rows_counter_loc_0_reg_261 <= ap_phi_reg_pp0_iter4_rows_counter_loc_0_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_156_p9 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_reg_549 <= {{strm_in_TDATA_int_regslice[26:16]}};
        data_wr_reg_544 <= {{strm_in_TDATA_int_regslice[63:32]}};
        input_data_user_reg_533 <= strm_in_TUSER_int_regslice;
        next_reset_load_reg_540 <= next_reset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_reg_549_pp0_iter1_reg <= col_reg_549;
        data_wr_reg_544_pp0_iter1_reg <= data_wr_reg_544;
        input_data_user_reg_533_pp0_iter1_reg <= input_data_user_reg_533;
        memW_read_reg_524 <= memW;
        memW_read_reg_524_pp0_iter1_reg <= memW_read_reg_524;
        next_reset_load_reg_540_pp0_iter1_reg <= next_reset_load_reg_540;
        tmp_reg_529 <= tmp_nbreadreq_fu_156_p9;
        tmp_reg_529_pp0_iter1_reg <= tmp_reg_529;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        data_wr_reg_544_pp0_iter2_reg <= data_wr_reg_544_pp0_iter1_reg;
        data_wr_reg_544_pp0_iter3_reg <= data_wr_reg_544_pp0_iter2_reg;
        data_wr_reg_544_pp0_iter4_reg <= data_wr_reg_544_pp0_iter3_reg;
        data_wr_reg_544_pp0_iter5_reg <= data_wr_reg_544_pp0_iter4_reg;
        input_data_user_reg_533_pp0_iter2_reg <= input_data_user_reg_533_pp0_iter1_reg;
        input_data_user_reg_533_pp0_iter3_reg <= input_data_user_reg_533_pp0_iter2_reg;
        input_data_user_reg_533_pp0_iter4_reg <= input_data_user_reg_533_pp0_iter3_reg;
        memW_read_reg_524_pp0_iter2_reg <= memW_read_reg_524_pp0_iter1_reg;
        memW_read_reg_524_pp0_iter3_reg <= memW_read_reg_524_pp0_iter2_reg;
        next_reset_load_reg_540_pp0_iter2_reg <= next_reset_load_reg_540_pp0_iter1_reg;
        next_reset_load_reg_540_pp0_iter3_reg <= next_reset_load_reg_540_pp0_iter2_reg;
        next_reset_load_reg_540_pp0_iter4_reg <= next_reset_load_reg_540_pp0_iter3_reg;
        tmp_reg_529_pp0_iter10_reg <= tmp_reg_529_pp0_iter9_reg;
        tmp_reg_529_pp0_iter2_reg <= tmp_reg_529_pp0_iter1_reg;
        tmp_reg_529_pp0_iter3_reg <= tmp_reg_529_pp0_iter2_reg;
        tmp_reg_529_pp0_iter4_reg <= tmp_reg_529_pp0_iter3_reg;
        tmp_reg_529_pp0_iter5_reg <= tmp_reg_529_pp0_iter4_reg;
        tmp_reg_529_pp0_iter6_reg <= tmp_reg_529_pp0_iter5_reg;
        tmp_reg_529_pp0_iter7_reg <= tmp_reg_529_pp0_iter6_reg;
        tmp_reg_529_pp0_iter8_reg <= tmp_reg_529_pp0_iter7_reg;
        tmp_reg_529_pp0_iter9_reg <= tmp_reg_529_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_529_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_col_counter_load_reg_584 <= max_col_counter;
        memWR_addr_reg_603 <= sext_ln91_fu_473_p1;
        rows_counter_load_reg_574 <= rows_counter;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_reg_529_pp0_iter4_reg == 1'd1))) begin
        numWrites <= add_ln79_fu_489_p2;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((next_reset_load_reg_540_pp0_iter4_reg == 1'd0) & (input_data_user_reg_533_pp0_iter4_reg == 1'd0) & (tmp_reg_529_pp0_iter4_reg == 1'd1)) | ((next_reset_load_reg_540_pp0_iter4_reg == 1'd1) & (input_data_user_reg_533_pp0_iter4_reg == 1'd0) & (tmp_reg_529_pp0_iter4_reg == 1'd1)))) begin
        ap_phi_mux_numWrites_loc_0_phi_fu_252_p6 = numWrites;
    end else begin
        ap_phi_mux_numWrites_loc_0_phi_fu_252_p6 = ap_phi_reg_pp0_iter5_numWrites_loc_0_reg_248;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_529_pp0_iter5_reg == 1'd1))) begin
        cols_count_ap_vld = 1'b1;
    end else begin
        cols_count_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_516_ce = 1'b1;
    end else begin
        grp_fu_516_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_529_pp0_iter5_reg == 1'd1))) begin
        maxcol_cnt_ap_vld = 1'b1;
    end else begin
        maxcol_cnt_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_reg_529_pp0_iter4_reg == 1'd1))) begin
        memWR_AWVALID = 1'b1;
    end else begin
        memWR_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_529_pp0_iter10_reg == 1'd1))) begin
        memWR_BREADY = 1'b1;
    end else begin
        memWR_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_529_pp0_iter5_reg == 1'd1))) begin
        memWR_WVALID = 1'b1;
    end else begin
        memWR_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_reg_529_pp0_iter4_reg == 1'd1))) begin
        memWR_blk_n_AW = m_axi_memWR_AWREADY;
    end else begin
        memWR_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_529_pp0_iter10_reg == 1'd1))) begin
        memWR_blk_n_B = m_axi_memWR_BVALID;
    end else begin
        memWR_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (tmp_reg_529_pp0_iter5_reg == 1'd1))) begin
        memWR_blk_n_W = m_axi_memWR_WREADY;
    end else begin
        memWR_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_529_pp0_iter5_reg == 1'd1))) begin
        rows_count_ap_vld = 1'b1;
    end else begin
        rows_count_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_529_pp0_iter5_reg == 1'd1))) begin
        statistics_ap_vld = 1'b1;
    end else begin
        statistics_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        strm_in_TDATA_blk_n = strm_in_TVALID_int_regslice;
    end else begin
        strm_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        strm_in_TREADY_int_regslice = 1'b1;
    end else begin
        strm_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln67_fu_411_p2 = (rows_counter + 11'd1);

assign add_ln71_fu_387_p2 = (columns_counter + 12'd1);

assign add_ln79_fu_489_p2 = (ap_phi_mux_numWrites_loc_0_phi_fu_252_p6 + 32'd1);

assign add_ln91_fu_458_p2 = (zext_ln91_fu_454_p1 + memW_read_reg_524_pp0_iter3_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_529_pp0_iter10_reg == 1'd1) & (memWR_BVALID == 1'b0)) | ((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state7_io)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_529_pp0_iter10_reg == 1'd1) & (memWR_BVALID == 1'b0)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state7_io)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_529_pp0_iter10_reg == 1'd1) & (memWR_BVALID == 1'b0)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == 1'b1) & (tmp_nbreadreq_fu_156_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((tmp_reg_529_pp0_iter10_reg == 1'd1) & (memWR_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((tmp_nbreadreq_fu_156_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((tmp_reg_529_pp0_iter4_reg == 1'd1) & (memWR_AWREADY == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((tmp_reg_529_pp0_iter5_reg == 1'd1) & (memWR_WREADY == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_425 = ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_439 = ((icmp_ln66_fu_399_p2 == 1'd1) & (next_reset_load_reg_540_pp0_iter3_reg == 1'd1) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0) & (tmp_reg_529_pp0_iter3_reg == 1'd1));
end

always @ (*) begin
    ap_condition_443 = ((icmp_ln66_fu_399_p2 == 1'd0) & (next_reset_load_reg_540_pp0_iter3_reg == 1'd1) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0) & (tmp_reg_529_pp0_iter3_reg == 1'd1));
end

always @ (*) begin
    ap_condition_459 = ((next_reset_load_reg_540_pp0_iter4_reg == 1'd1) & (input_data_user_reg_533_pp0_iter4_reg == 1'd0) & (tmp_reg_529_pp0_iter4_reg == 1'd1));
end

always @ (*) begin
    ap_condition_462 = ((next_reset_load_reg_540_pp0_iter4_reg == 1'd0) & (input_data_user_reg_533_pp0_iter4_reg == 1'd0) & (tmp_reg_529_pp0_iter4_reg == 1'd1));
end

always @ (*) begin
    ap_condition_754 = ((icmp_ln66_fu_399_p2 == 1'd1) & (next_reset_load_reg_540_pp0_iter3_reg == 1'd1) & (input_data_user_reg_533_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_condition_767 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_reg_529_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_22_reg_288 = 'bx;

assign ap_phi_reg_pp0_iter0_max_col_counter_loc_0_reg_238 = 'bx;

assign ap_phi_reg_pp0_iter0_max_col_counter_loc_1_reg_274 = 'bx;

assign ap_phi_reg_pp0_iter0_numWrites_loc_0_reg_248 = 'bx;

assign ap_phi_reg_pp0_iter0_rows_counter_loc_0_reg_261 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cols_count = ap_phi_reg_pp0_iter6_empty_22_reg_288;

assign grp_fu_516_p0 = grp_fu_516_p00;

assign grp_fu_516_p00 = width_fu_360_p1;

assign grp_fu_516_p1 = grp_fu_516_p10;

assign grp_fu_516_p10 = row_fu_346_p1;

assign grp_fu_516_p2 = grp_fu_516_p20;

assign grp_fu_516_p20 = col_reg_549_pp0_iter1_reg;

assign icmp_ln66_fu_399_p2 = ((max_col_counter < columns_counter) ? 1'b1 : 1'b0);

assign input_data_last_fu_310_p1 = strm_in_TLAST_int_regslice;

assign input_data_user_fu_306_p1 = strm_in_TUSER_int_regslice;

assign maxcol_cnt = ap_phi_reg_pp0_iter6_max_col_counter_loc_1_reg_274;

assign next_reset_load_load_fu_314_p1 = next_reset;

assign row_fu_346_p1 = strm_in_TDATA_int_regslice[10:0];

assign rows_count = ap_phi_reg_pp0_iter6_rows_counter_loc_0_reg_261;

assign sext_ln91_fu_473_p1 = $signed(trunc_ln_fu_463_p4);

assign shl_ln_fu_447_p3 = {{add_ln86_reg_569}, {2'd0}};

assign strm_in_TREADY = regslice_both_strm_in_V_data_V_U_ack_in;

assign tmp_nbreadreq_fu_156_p9 = strm_in_TVALID_int_regslice;

assign trunc_ln_fu_463_p4 = {{add_ln91_fu_458_p2[63:2]}};

assign width_fu_360_p1 = width_img[11:0];

assign zext_ln91_fu_454_p1 = shl_ln_fu_447_p3;

endmodule //cpyData_copro
