// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="wr_data_direct_wr_data_direct,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.250000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=579,HLS_SYN_LUT=513,HLS_VERSION=2023_1}" *)

module wr_data_direct (
        ap_clk,
        ap_rst_n,
        strm_in_TDATA,
        strm_in_TVALID,
        strm_in_TREADY,
        strm_in_TKEEP,
        strm_in_TSTRB,
        strm_in_TUSER,
        strm_in_TLAST,
        strm_in_TID,
        strm_in_TDEST,
        s_dir_TDATA,
        s_dir_TVALID,
        s_dir_TREADY,
        s_data_TDATA,
        s_data_TVALID,
        s_data_TREADY,
        s_axi_Axi_lite_AWVALID,
        s_axi_Axi_lite_AWREADY,
        s_axi_Axi_lite_AWADDR,
        s_axi_Axi_lite_WVALID,
        s_axi_Axi_lite_WREADY,
        s_axi_Axi_lite_WDATA,
        s_axi_Axi_lite_WSTRB,
        s_axi_Axi_lite_ARVALID,
        s_axi_Axi_lite_ARREADY,
        s_axi_Axi_lite_ARADDR,
        s_axi_Axi_lite_RVALID,
        s_axi_Axi_lite_RREADY,
        s_axi_Axi_lite_RDATA,
        s_axi_Axi_lite_RRESP,
        s_axi_Axi_lite_BVALID,
        s_axi_Axi_lite_BREADY,
        s_axi_Axi_lite_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXI_LITE_DATA_WIDTH = 32;
parameter    C_S_AXI_AXI_LITE_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXI_LITE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] strm_in_TDATA;
input   strm_in_TVALID;
output   strm_in_TREADY;
input  [7:0] strm_in_TKEEP;
input  [7:0] strm_in_TSTRB;
input  [0:0] strm_in_TUSER;
input  [0:0] strm_in_TLAST;
input  [0:0] strm_in_TID;
input  [0:0] strm_in_TDEST;
output  [31:0] s_dir_TDATA;
output   s_dir_TVALID;
input   s_dir_TREADY;
output  [31:0] s_data_TDATA;
output   s_data_TVALID;
input   s_data_TREADY;
input   s_axi_Axi_lite_AWVALID;
output   s_axi_Axi_lite_AWREADY;
input  [C_S_AXI_AXI_LITE_ADDR_WIDTH - 1:0] s_axi_Axi_lite_AWADDR;
input   s_axi_Axi_lite_WVALID;
output   s_axi_Axi_lite_WREADY;
input  [C_S_AXI_AXI_LITE_DATA_WIDTH - 1:0] s_axi_Axi_lite_WDATA;
input  [C_S_AXI_AXI_LITE_WSTRB_WIDTH - 1:0] s_axi_Axi_lite_WSTRB;
input   s_axi_Axi_lite_ARVALID;
output   s_axi_Axi_lite_ARREADY;
input  [C_S_AXI_AXI_LITE_ADDR_WIDTH - 1:0] s_axi_Axi_lite_ARADDR;
output   s_axi_Axi_lite_RVALID;
input   s_axi_Axi_lite_RREADY;
output  [C_S_AXI_AXI_LITE_DATA_WIDTH - 1:0] s_axi_Axi_lite_RDATA;
output  [1:0] s_axi_Axi_lite_RRESP;
output   s_axi_Axi_lite_BVALID;
input   s_axi_Axi_lite_BREADY;
output  [1:0] s_axi_Axi_lite_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] width_img;
wire   [31:0] base_addr;
reg    statistics_ap_vld;
reg   [31:0] numWrites;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] tmp_nbreadreq_fu_104_p9;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] tmp_reg_264;
reg   [0:0] tmp_reg_264_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
reg   [0:0] tmp_reg_264_pp0_iter4_reg;
wire    regslice_both_s_dir_U_apdone_blk;
wire    regslice_both_s_data_U_apdone_blk;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state6_io;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_11001;
reg    strm_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    s_dir_TDATA_blk_n;
reg    s_data_TDATA_blk_n;
reg   [31:0] base_addr_read_reg_259;
reg   [31:0] base_addr_read_reg_259_pp0_iter1_reg;
reg   [31:0] base_addr_read_reg_259_pp0_iter2_reg;
reg   [31:0] base_addr_read_reg_259_pp0_iter3_reg;
reg   [0:0] tmp_reg_264_pp0_iter1_reg;
reg   [0:0] tmp_reg_264_pp0_iter2_reg;
reg   [31:0] data_wr_reg_268;
reg   [31:0] data_wr_reg_268_pp0_iter1_reg;
reg   [31:0] data_wr_reg_268_pp0_iter2_reg;
reg   [31:0] data_wr_reg_268_pp0_iter3_reg;
reg   [10:0] col_reg_273;
reg   [10:0] col_reg_273_pp0_iter1_reg;
wire   [31:0] select_ln66_fu_217_p3;
reg   [31:0] select_ln66_reg_288;
reg   [31:0] select_ln66_reg_288_pp0_iter1_reg;
reg   [31:0] select_ln66_reg_288_pp0_iter2_reg;
reg   [31:0] select_ln66_reg_288_pp0_iter3_reg;
wire   [21:0] grp_fu_251_p3;
reg   [21:0] add_ln61_reg_298;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] row_fu_189_p1;
wire   [11:0] width_fu_175_p1;
wire   [31:0] add_ln66_fu_211_p2;
wire   [23:0] shl_ln_fu_234_p3;
wire   [31:0] zext_ln61_3_fu_241_p1;
wire   [11:0] grp_fu_251_p0;
wire   [10:0] grp_fu_251_p1;
wire   [10:0] grp_fu_251_p2;
reg    grp_fu_251_ce;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_strm_in_V_data_V_U_apdone_blk;
wire   [63:0] strm_in_TDATA_int_regslice;
wire    strm_in_TVALID_int_regslice;
reg    strm_in_TREADY_int_regslice;
wire    regslice_both_strm_in_V_data_V_U_ack_in;
wire    regslice_both_strm_in_V_keep_V_U_apdone_blk;
wire   [7:0] strm_in_TKEEP_int_regslice;
wire    regslice_both_strm_in_V_keep_V_U_vld_out;
wire    regslice_both_strm_in_V_keep_V_U_ack_in;
wire    regslice_both_strm_in_V_strb_V_U_apdone_blk;
wire   [7:0] strm_in_TSTRB_int_regslice;
wire    regslice_both_strm_in_V_strb_V_U_vld_out;
wire    regslice_both_strm_in_V_strb_V_U_ack_in;
wire    regslice_both_strm_in_V_user_V_U_apdone_blk;
wire   [0:0] strm_in_TUSER_int_regslice;
wire    regslice_both_strm_in_V_user_V_U_vld_out;
wire    regslice_both_strm_in_V_user_V_U_ack_in;
wire    regslice_both_strm_in_V_last_V_U_apdone_blk;
wire   [0:0] strm_in_TLAST_int_regslice;
wire    regslice_both_strm_in_V_last_V_U_vld_out;
wire    regslice_both_strm_in_V_last_V_U_ack_in;
wire    regslice_both_strm_in_V_id_V_U_apdone_blk;
wire   [0:0] strm_in_TID_int_regslice;
wire    regslice_both_strm_in_V_id_V_U_vld_out;
wire    regslice_both_strm_in_V_id_V_U_ack_in;
wire    regslice_both_strm_in_V_dest_V_U_apdone_blk;
wire   [0:0] strm_in_TDEST_int_regslice;
wire    regslice_both_strm_in_V_dest_V_U_vld_out;
wire    regslice_both_strm_in_V_dest_V_U_ack_in;
wire   [31:0] s_dir_TDATA_int_regslice;
reg    s_dir_TVALID_int_regslice;
wire    s_dir_TREADY_int_regslice;
wire    regslice_both_s_dir_U_vld_out;
reg    s_data_TVALID_int_regslice;
wire    s_data_TREADY_int_regslice;
wire    regslice_both_s_data_U_vld_out;
wire   [21:0] grp_fu_251_p00;
wire   [21:0] grp_fu_251_p10;
wire   [21:0] grp_fu_251_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 numWrites = 32'd0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

wr_data_direct_Axi_lite_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXI_LITE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXI_LITE_DATA_WIDTH ))
Axi_lite_s_axi_U(
    .AWVALID(s_axi_Axi_lite_AWVALID),
    .AWREADY(s_axi_Axi_lite_AWREADY),
    .AWADDR(s_axi_Axi_lite_AWADDR),
    .WVALID(s_axi_Axi_lite_WVALID),
    .WREADY(s_axi_Axi_lite_WREADY),
    .WDATA(s_axi_Axi_lite_WDATA),
    .WSTRB(s_axi_Axi_lite_WSTRB),
    .ARVALID(s_axi_Axi_lite_ARVALID),
    .ARREADY(s_axi_Axi_lite_ARREADY),
    .ARADDR(s_axi_Axi_lite_ARADDR),
    .RVALID(s_axi_Axi_lite_RVALID),
    .RREADY(s_axi_Axi_lite_RREADY),
    .RDATA(s_axi_Axi_lite_RDATA),
    .RRESP(s_axi_Axi_lite_RRESP),
    .BVALID(s_axi_Axi_lite_BVALID),
    .BREADY(s_axi_Axi_lite_BREADY),
    .BRESP(s_axi_Axi_lite_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .width_img(width_img),
    .base_addr(base_addr),
    .statistics(select_ln66_reg_288_pp0_iter3_reg),
    .statistics_ap_vld(statistics_ap_vld)
);

wr_data_direct_mac_muladd_12ns_11ns_11ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
mac_muladd_12ns_11ns_11ns_22_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_251_p0),
    .din1(grp_fu_251_p1),
    .din2(grp_fu_251_p2),
    .ce(grp_fu_251_ce),
    .dout(grp_fu_251_p3)
);

wr_data_direct_regslice_both #(
    .DataWidth( 64 ))
regslice_both_strm_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TDATA),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_data_V_U_ack_in),
    .data_out(strm_in_TDATA_int_regslice),
    .vld_out(strm_in_TVALID_int_regslice),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_data_V_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 8 ))
regslice_both_strm_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TKEEP),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_keep_V_U_ack_in),
    .data_out(strm_in_TKEEP_int_regslice),
    .vld_out(regslice_both_strm_in_V_keep_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_keep_V_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 8 ))
regslice_both_strm_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TSTRB),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_strb_V_U_ack_in),
    .data_out(strm_in_TSTRB_int_regslice),
    .vld_out(regslice_both_strm_in_V_strb_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_strb_V_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TUSER),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_user_V_U_ack_in),
    .data_out(strm_in_TUSER_int_regslice),
    .vld_out(regslice_both_strm_in_V_user_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_user_V_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TLAST),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_last_V_U_ack_in),
    .data_out(strm_in_TLAST_int_regslice),
    .vld_out(regslice_both_strm_in_V_last_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_last_V_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TID),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_id_V_U_ack_in),
    .data_out(strm_in_TID_int_regslice),
    .vld_out(regslice_both_strm_in_V_id_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_id_V_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 1 ))
regslice_both_strm_in_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(strm_in_TDEST),
    .vld_in(strm_in_TVALID),
    .ack_in(regslice_both_strm_in_V_dest_V_U_ack_in),
    .data_out(strm_in_TDEST_int_regslice),
    .vld_out(regslice_both_strm_in_V_dest_V_U_vld_out),
    .ack_out(strm_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_strm_in_V_dest_V_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 32 ))
regslice_both_s_dir_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_dir_TDATA_int_regslice),
    .vld_in(s_dir_TVALID_int_regslice),
    .ack_in(s_dir_TREADY_int_regslice),
    .data_out(s_dir_TDATA),
    .vld_out(regslice_both_s_dir_U_vld_out),
    .ack_out(s_dir_TREADY),
    .apdone_blk(regslice_both_s_dir_U_apdone_blk)
);

wr_data_direct_regslice_both #(
    .DataWidth( 32 ))
regslice_both_s_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_wr_reg_268_pp0_iter3_reg),
    .vld_in(s_data_TVALID_int_regslice),
    .ack_in(s_data_TREADY_int_regslice),
    .data_out(s_data_TDATA),
    .vld_out(regslice_both_s_data_U_vld_out),
    .ack_out(s_data_TREADY),
    .apdone_blk(regslice_both_s_data_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_reg_264_pp0_iter2_reg == 1'd1))) begin
        add_ln61_reg_298 <= grp_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        base_addr_read_reg_259 <= base_addr;
        base_addr_read_reg_259_pp0_iter1_reg <= base_addr_read_reg_259;
        col_reg_273_pp0_iter1_reg <= col_reg_273;
        data_wr_reg_268_pp0_iter1_reg <= data_wr_reg_268;
        select_ln66_reg_288_pp0_iter1_reg <= select_ln66_reg_288;
        tmp_reg_264 <= tmp_nbreadreq_fu_104_p9;
        tmp_reg_264_pp0_iter1_reg <= tmp_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        base_addr_read_reg_259_pp0_iter2_reg <= base_addr_read_reg_259_pp0_iter1_reg;
        base_addr_read_reg_259_pp0_iter3_reg <= base_addr_read_reg_259_pp0_iter2_reg;
        data_wr_reg_268_pp0_iter2_reg <= data_wr_reg_268_pp0_iter1_reg;
        data_wr_reg_268_pp0_iter3_reg <= data_wr_reg_268_pp0_iter2_reg;
        select_ln66_reg_288_pp0_iter2_reg <= select_ln66_reg_288_pp0_iter1_reg;
        select_ln66_reg_288_pp0_iter3_reg <= select_ln66_reg_288_pp0_iter2_reg;
        tmp_reg_264_pp0_iter2_reg <= tmp_reg_264_pp0_iter1_reg;
        tmp_reg_264_pp0_iter3_reg <= tmp_reg_264_pp0_iter2_reg;
        tmp_reg_264_pp0_iter4_reg <= tmp_reg_264_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_reg_273 <= {{strm_in_TDATA_int_regslice[26:16]}};
        data_wr_reg_268 <= {{strm_in_TDATA_int_regslice[63:32]}};
        select_ln66_reg_288 <= select_ln66_fu_217_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        numWrites <= select_ln66_fu_217_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_251_ce = 1'b1;
    end else begin
        grp_fu_251_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_reg_264_pp0_iter4_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_reg_264_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        s_data_TDATA_blk_n = s_data_TREADY_int_regslice;
    end else begin
        s_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_264_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        s_data_TVALID_int_regslice = 1'b1;
    end else begin
        s_data_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_reg_264_pp0_iter4_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_reg_264_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        s_dir_TDATA_blk_n = s_dir_TREADY_int_regslice;
    end else begin
        s_dir_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_264_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        s_dir_TVALID_int_regslice = 1'b1;
    end else begin
        s_dir_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_264_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        statistics_ap_vld = 1'b1;
    end else begin
        statistics_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TDATA_blk_n = strm_in_TVALID_int_regslice;
    end else begin
        strm_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (tmp_nbreadreq_fu_104_p9 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_TREADY_int_regslice = 1'b1;
    end else begin
        strm_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_211_p2 = (numWrites + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_s_data_U_apdone_blk == 1'b1) | (regslice_both_s_dir_U_apdone_blk == 1'b1) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)))) | ((1'b1 == 1'b1) & (tmp_nbreadreq_fu_104_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_s_data_U_apdone_blk == 1'b1) | (regslice_both_s_dir_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state6_io) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)))) | ((1'b1 == 1'b1) & (tmp_nbreadreq_fu_104_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_s_data_U_apdone_blk == 1'b1) | (regslice_both_s_dir_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state6_io) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)))) | ((1'b1 == 1'b1) & (tmp_nbreadreq_fu_104_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((tmp_nbreadreq_fu_104_p9 == 1'd1) & (strm_in_TVALID_int_regslice == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter3_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state6_io = (((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((regslice_both_s_data_U_apdone_blk == 1'b1) | (regslice_both_s_dir_U_apdone_blk == 1'b1) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_data_TREADY_int_regslice == 1'b0)) | ((tmp_reg_264_pp0_iter4_reg == 1'd1) & (s_dir_TREADY_int_regslice == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_251_p0 = grp_fu_251_p00;

assign grp_fu_251_p00 = width_fu_175_p1;

assign grp_fu_251_p1 = grp_fu_251_p10;

assign grp_fu_251_p10 = row_fu_189_p1;

assign grp_fu_251_p2 = grp_fu_251_p20;

assign grp_fu_251_p20 = col_reg_273_pp0_iter1_reg;

assign row_fu_189_p1 = strm_in_TDATA_int_regslice[10:0];

assign s_data_TVALID = regslice_both_s_data_U_vld_out;

assign s_dir_TDATA_int_regslice = (zext_ln61_3_fu_241_p1 + base_addr_read_reg_259_pp0_iter3_reg);

assign s_dir_TVALID = regslice_both_s_dir_U_vld_out;

assign select_ln66_fu_217_p3 = ((strm_in_TUSER_int_regslice[0:0] == 1'b1) ? 32'd1 : add_ln66_fu_211_p2);

assign shl_ln_fu_234_p3 = {{add_ln61_reg_298}, {2'd0}};

assign strm_in_TREADY = regslice_both_strm_in_V_data_V_U_ack_in;

assign tmp_nbreadreq_fu_104_p9 = strm_in_TVALID_int_regslice;

assign width_fu_175_p1 = width_img[11:0];

assign zext_ln61_3_fu_241_p1 = shl_ln_fu_234_p3;

endmodule //wr_data_direct
