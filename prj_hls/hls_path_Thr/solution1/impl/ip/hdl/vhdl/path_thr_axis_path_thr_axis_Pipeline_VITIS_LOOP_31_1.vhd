-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity path_thr_axis_path_thr_axis_Pipeline_VITIS_LOOP_31_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    addr_load : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    strm_in_TVALID : IN STD_LOGIC;
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_TVALID : OUT STD_LOGIC;
    strm_out_TREADY : IN STD_LOGIC;
    strm_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    strm_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    strm_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    strm_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    strm_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    strm_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    statistics : OUT STD_LOGIC_VECTOR (31 downto 0);
    statistics_ap_vld : OUT STD_LOGIC;
    addr_flag_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    addr_flag_0_out_ap_vld : OUT STD_LOGIC;
    addr_loc_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    addr_loc_0_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of path_thr_axis_path_thr_axis_Pipeline_VITIS_LOOP_31_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_nbreadreq_fu_104_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_flag_0_reg_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_data_user_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_last_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_wr_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_wr_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal addr_loc_0_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln43_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_228_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_flag_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_275 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                addr_flag_0_reg_192 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                addr_flag_0_reg_192 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    addr_loc_0_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                addr_loc_0_fu_94 <= addr_load;
            elsif (((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                addr_loc_0_fu_94 <= select_ln51_fu_254_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_wr_reg_289 <= data_wr_fu_242_p2;
                input_data_last_reg_284 <= strm_in_TLAST;
                input_data_user_reg_279 <= strm_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_275 <= tmp_nbreadreq_fu_104_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_104_p9, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln51_fu_248_p2 <= std_logic_vector(unsigned(addr_loc_0_fu_94) + unsigned(ap_const_lv32_1));
    addr_flag_0_out <= addr_flag_0_reg_192;

    addr_flag_0_out_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            addr_flag_0_out_ap_vld <= ap_const_logic_1;
        else 
            addr_flag_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    addr_loc_0_out <= addr_loc_0_fu_94;

    addr_loc_0_out_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            addr_loc_0_out_ap_vld <= ap_const_logic_1;
        else 
            addr_loc_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(strm_in_TVALID, strm_out_TREADY, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_104_p9, ap_enable_reg_pp0_iter1, tmp_reg_275)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_reg_275 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (strm_out_TREADY = ap_const_logic_0)) or ((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (strm_in_TVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(strm_in_TVALID, strm_out_TREADY, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_104_p9, ap_enable_reg_pp0_iter1, tmp_reg_275, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((tmp_reg_275 = ap_const_lv1_1) and (strm_out_TREADY = ap_const_logic_0)))) or ((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (strm_in_TVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(strm_in_TVALID, strm_out_TREADY, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_104_p9, ap_enable_reg_pp0_iter1, tmp_reg_275, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((tmp_reg_275 = ap_const_lv1_1) and (strm_out_TREADY = ap_const_logic_0)))) or ((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (strm_in_TVALID = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(strm_in_TVALID, tmp_nbreadreq_fu_104_p9)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (strm_in_TVALID = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(strm_out_TREADY, tmp_reg_275)
    begin
                ap_block_state3_io <= ((tmp_reg_275 = ap_const_lv1_1) and (strm_out_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(strm_out_TREADY, tmp_reg_275)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((tmp_reg_275 = ap_const_lv1_1) and (strm_out_TREADY = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_nbreadreq_fu_104_p9)
    begin
        if ((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_wr_fu_242_p2 <= std_logic_vector(unsigned(trunc_ln43_fu_238_p1) + unsigned(tmp_s_fu_228_p4));
    select_ln51_fu_254_p3 <= 
        ap_const_lv32_1 when (strm_in_TUSER(0) = '1') else 
        add_ln51_fu_248_p2;
    statistics <= 
        ap_const_lv32_1 when (strm_in_TUSER(0) = '1') else 
        add_ln51_fu_248_p2;

    statistics_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_104_p9, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            statistics_ap_vld <= ap_const_logic_1;
        else 
            statistics_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_TDATA_blk_n_assign_proc : process(strm_in_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_nbreadreq_fu_104_p9)
    begin
        if (((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TDATA_blk_n <= strm_in_TVALID;
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_104_p9, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_104_p9 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_TREADY <= ap_const_logic_1;
        else 
            strm_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    strm_out_TDATA <= data_wr_reg_289;

    strm_out_TDATA_blk_n_assign_proc : process(strm_out_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_275)
    begin
        if (((tmp_reg_275 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_out_TDATA_blk_n <= strm_out_TREADY;
        else 
            strm_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_TDEST <= ap_const_lv1_0;
    strm_out_TID <= ap_const_lv1_0;
    strm_out_TKEEP <= ap_const_lv4_F;
    strm_out_TLAST <= input_data_last_reg_284;
    strm_out_TSTRB <= ap_const_lv4_0;
    strm_out_TUSER <= input_data_user_reg_279;

    strm_out_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_275, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_275 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_out_TVALID <= ap_const_logic_1;
        else 
            strm_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_104_p9 <= (0=>(strm_in_TVALID), others=>'-');
    tmp_s_fu_228_p4 <= strm_in_TDATA(63 downto 32);
    trunc_ln43_fu_238_p1 <= strm_in_TDATA(32 - 1 downto 0);
end behav;
